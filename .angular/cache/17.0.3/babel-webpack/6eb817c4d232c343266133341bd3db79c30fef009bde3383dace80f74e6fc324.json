{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nexport default class RealtimeClient {\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\n  constructor(endPoint, options) {\n    var _this = this;\n    var _a;\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\r\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n     *\r\n     * @internal\r\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args));\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n    if (accessToken) this.accessToken = accessToken;\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer( /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.disconnect();\n      _this.connect();\n    }), this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\r\n   * Returns all created channels\r\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\n  removeChannel(channel) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const status = yield channel.unsubscribe();\n      if (_this2.channels.length === 0) {\n        _this2.disconnect();\n      }\n      return status;\n    })();\n  }\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\n  removeAllChannels() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const values_1 = yield Promise.all(_this3.channels.map(channel => channel.unsubscribe()));\n      _this3.disconnect();\n      return values_1;\n    })();\n  }\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\r\n   * Returns the current state of the socket.\r\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n}","map":{"version":3,"names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","RealtimeClient","constructor","endPoint","options","_this","_a","accessToken","channels","headers","params","timeout","transport","heartbeatIntervalMs","heartbeatTimer","undefined","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","_resolveFetch","customFetch","_fetch","fetch","args","then","default","websocket","Object","assign","apikey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","_asyncToGenerator","disconnect","connect","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","_onConnMessage","onclose","_onConnClose","code","reason","clearInterval","reset","getChannels","removeChannel","channel","_this2","status","unsubscribe","length","removeAllChannels","_this3","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","result","send","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","_appendParams","vsn","rawMessage","type","_isMember","_trigger","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js"],"sourcesContent":["import { w3cwebsocket } from 'websocket';\r\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE, } from './lib/constants';\r\nimport Timer from './lib/timer';\r\nimport Serializer from './lib/serializer';\r\nimport RealtimeChannel from './RealtimeChannel';\r\nconst noop = () => { };\r\nexport default class RealtimeClient {\r\n    /**\r\n     * Initializes the Socket.\r\n     *\r\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n     * @param options.transport The Websocket Transport, for example WebSocket.\r\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n     * @param options.params The optional params to pass when connecting.\r\n     * @param options.headers The optional headers to pass when connecting.\r\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n     */\r\n    constructor(endPoint, options) {\r\n        var _a;\r\n        this.accessToken = null;\r\n        this.channels = [];\r\n        this.endPoint = '';\r\n        this.headers = DEFAULT_HEADERS;\r\n        this.params = {};\r\n        this.timeout = DEFAULT_TIMEOUT;\r\n        this.transport = w3cwebsocket;\r\n        this.heartbeatIntervalMs = 30000;\r\n        this.heartbeatTimer = undefined;\r\n        this.pendingHeartbeatRef = null;\r\n        this.ref = 0;\r\n        this.logger = noop;\r\n        this.conn = null;\r\n        this.sendBuffer = [];\r\n        this.serializer = new Serializer();\r\n        this.stateChangeCallbacks = {\r\n            open: [],\r\n            close: [],\r\n            error: [],\r\n            message: [],\r\n        };\r\n        /**\r\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n         *\r\n         * @internal\r\n         */\r\n        this._resolveFetch = (customFetch) => {\r\n            let _fetch;\r\n            if (customFetch) {\r\n                _fetch = customFetch;\r\n            }\r\n            else if (typeof fetch === 'undefined') {\r\n                _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\r\n            }\r\n            else {\r\n                _fetch = fetch;\r\n            }\r\n            return (...args) => _fetch(...args);\r\n        };\r\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\r\n        if (options === null || options === void 0 ? void 0 : options.params)\r\n            this.params = options.params;\r\n        if (options === null || options === void 0 ? void 0 : options.headers)\r\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\r\n        if (options === null || options === void 0 ? void 0 : options.timeout)\r\n            this.timeout = options.timeout;\r\n        if (options === null || options === void 0 ? void 0 : options.logger)\r\n            this.logger = options.logger;\r\n        if (options === null || options === void 0 ? void 0 : options.transport)\r\n            this.transport = options.transport;\r\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\r\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\r\n        const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\r\n        if (accessToken)\r\n            this.accessToken = accessToken;\r\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\r\n            ? options.reconnectAfterMs\r\n            : (tries) => {\r\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\r\n            };\r\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\r\n            ? options.encode\r\n            : (payload, callback) => {\r\n                return callback(JSON.stringify(payload));\r\n            };\r\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\r\n            ? options.decode\r\n            : this.serializer.decode.bind(this.serializer);\r\n        this.reconnectTimer = new Timer(async () => {\r\n            this.disconnect();\r\n            this.connect();\r\n        }, this.reconnectAfterMs);\r\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\r\n    }\r\n    /**\r\n     * Connects the socket, unless already connected.\r\n     */\r\n    connect() {\r\n        if (this.conn) {\r\n            return;\r\n        }\r\n        this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\r\n        if (this.conn) {\r\n            this.conn.binaryType = 'arraybuffer';\r\n            this.conn.onopen = () => this._onConnOpen();\r\n            this.conn.onerror = (error) => this._onConnError(error);\r\n            this.conn.onmessage = (event) => this._onConnMessage(event);\r\n            this.conn.onclose = (event) => this._onConnClose(event);\r\n        }\r\n    }\r\n    /**\r\n     * Disconnects the socket.\r\n     *\r\n     * @param code A numeric status code to send on disconnect.\r\n     * @param reason A custom reason for the disconnect.\r\n     */\r\n    disconnect(code, reason) {\r\n        if (this.conn) {\r\n            this.conn.onclose = function () { }; // noop\r\n            if (code) {\r\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\r\n            }\r\n            else {\r\n                this.conn.close();\r\n            }\r\n            this.conn = null;\r\n            // remove open handles\r\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\r\n            this.reconnectTimer.reset();\r\n        }\r\n    }\r\n    /**\r\n     * Returns all created channels\r\n     */\r\n    getChannels() {\r\n        return this.channels;\r\n    }\r\n    /**\r\n     * Unsubscribes and removes a single channel\r\n     * @param channel A RealtimeChannel instance\r\n     */\r\n    async removeChannel(channel) {\r\n        const status = await channel.unsubscribe();\r\n        if (this.channels.length === 0) {\r\n            this.disconnect();\r\n        }\r\n        return status;\r\n    }\r\n    /**\r\n     * Unsubscribes and removes all channels\r\n     */\r\n    async removeAllChannels() {\r\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\r\n        this.disconnect();\r\n        return values_1;\r\n    }\r\n    /**\r\n     * Logs the message.\r\n     *\r\n     * For customized logging, `this.logger` can be overridden.\r\n     */\r\n    log(kind, msg, data) {\r\n        this.logger(kind, msg, data);\r\n    }\r\n    /**\r\n     * Returns the current state of the socket.\r\n     */\r\n    connectionState() {\r\n        switch (this.conn && this.conn.readyState) {\r\n            case SOCKET_STATES.connecting:\r\n                return CONNECTION_STATE.Connecting;\r\n            case SOCKET_STATES.open:\r\n                return CONNECTION_STATE.Open;\r\n            case SOCKET_STATES.closing:\r\n                return CONNECTION_STATE.Closing;\r\n            default:\r\n                return CONNECTION_STATE.Closed;\r\n        }\r\n    }\r\n    /**\r\n     * Returns `true` is the connection is open.\r\n     */\r\n    isConnected() {\r\n        return this.connectionState() === CONNECTION_STATE.Open;\r\n    }\r\n    channel(topic, params = { config: {} }) {\r\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\r\n        this.channels.push(chan);\r\n        return chan;\r\n    }\r\n    /**\r\n     * Push out a message if the socket is connected.\r\n     *\r\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n     */\r\n    push(data) {\r\n        const { topic, event, payload, ref } = data;\r\n        const callback = () => {\r\n            this.encode(data, (result) => {\r\n                var _a;\r\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\r\n            });\r\n        };\r\n        this.log('push', `${topic} ${event} (${ref})`, payload);\r\n        if (this.isConnected()) {\r\n            callback();\r\n        }\r\n        else {\r\n            this.sendBuffer.push(callback);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n     *\r\n     * @param token A JWT string.\r\n     */\r\n    setAuth(token) {\r\n        this.accessToken = token;\r\n        this.channels.forEach((channel) => {\r\n            token && channel.updateJoinPayload({ access_token: token });\r\n            if (channel.joinedOnce && channel._isJoined()) {\r\n                channel._push(CHANNEL_EVENTS.access_token, { access_token: token });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Return the next message ref, accounting for overflows\r\n     *\r\n     * @internal\r\n     */\r\n    _makeRef() {\r\n        let newRef = this.ref + 1;\r\n        if (newRef === this.ref) {\r\n            this.ref = 0;\r\n        }\r\n        else {\r\n            this.ref = newRef;\r\n        }\r\n        return this.ref.toString();\r\n    }\r\n    /**\r\n     * Unsubscribe from channels with the specified topic.\r\n     *\r\n     * @internal\r\n     */\r\n    _leaveOpenTopic(topic) {\r\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\r\n        if (dupChannel) {\r\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\r\n            dupChannel.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Removes a subscription from the socket.\r\n     *\r\n     * @param channel An open subscription.\r\n     *\r\n     * @internal\r\n     */\r\n    _remove(channel) {\r\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\r\n    }\r\n    /**\r\n     * Returns the URL of the websocket.\r\n     *\r\n     * @internal\r\n     */\r\n    _endPointURL() {\r\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\r\n    }\r\n    /** @internal */\r\n    _onConnMessage(rawMessage) {\r\n        this.decode(rawMessage.data, (msg) => {\r\n            let { topic, event, payload, ref } = msg;\r\n            if ((ref && ref === this.pendingHeartbeatRef) ||\r\n                event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\r\n                this.pendingHeartbeatRef = null;\r\n            }\r\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\r\n            this.channels\r\n                .filter((channel) => channel._isMember(topic))\r\n                .forEach((channel) => channel._trigger(event, payload, ref));\r\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\r\n        });\r\n    }\r\n    /** @internal */\r\n    _onConnOpen() {\r\n        this.log('transport', `connected to ${this._endPointURL()}`);\r\n        this._flushSendBuffer();\r\n        this.reconnectTimer.reset();\r\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\r\n        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\r\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\r\n    }\r\n    /** @internal */\r\n    _onConnClose(event) {\r\n        this.log('transport', 'close', event);\r\n        this._triggerChanError();\r\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\r\n        this.reconnectTimer.scheduleTimeout();\r\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\r\n    }\r\n    /** @internal */\r\n    _onConnError(error) {\r\n        this.log('transport', error.message);\r\n        this._triggerChanError();\r\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\r\n    }\r\n    /** @internal */\r\n    _triggerChanError() {\r\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\r\n    }\r\n    /** @internal */\r\n    _appendParams(url, params) {\r\n        if (Object.keys(params).length === 0) {\r\n            return url;\r\n        }\r\n        const prefix = url.match(/\\?/) ? '&' : '?';\r\n        const query = new URLSearchParams(params);\r\n        return `${url}${prefix}${query}`;\r\n    }\r\n    /** @internal */\r\n    _flushSendBuffer() {\r\n        if (this.isConnected() && this.sendBuffer.length > 0) {\r\n            this.sendBuffer.forEach((callback) => callback());\r\n            this.sendBuffer = [];\r\n        }\r\n    }\r\n    /** @internal */\r\n    _sendHeartbeat() {\r\n        var _a;\r\n        if (!this.isConnected()) {\r\n            return;\r\n        }\r\n        if (this.pendingHeartbeatRef) {\r\n            this.pendingHeartbeatRef = null;\r\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\r\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\r\n            return;\r\n        }\r\n        this.pendingHeartbeatRef = this._makeRef();\r\n        this.push({\r\n            topic: 'phoenix',\r\n            event: 'heartbeat',\r\n            payload: {},\r\n            ref: this.pendingHeartbeatRef,\r\n        });\r\n        this.setAuth(this.accessToken);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}