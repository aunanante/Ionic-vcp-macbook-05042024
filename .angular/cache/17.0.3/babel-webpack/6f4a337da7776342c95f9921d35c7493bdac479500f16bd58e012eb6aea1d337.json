{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"src/app/services/payment.service\";\nimport * as i4 from \"src/app/services/user.service\";\nexport class CreatePaymentPage {\n  constructor(formBuilder, modalController, alertController, paymentService, userService) {\n    this.formBuilder = formBuilder;\n    this.modalController = modalController;\n    this.alertController = alertController;\n    this.paymentService = paymentService;\n    this.userService = userService;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.subscribeToFormChanges();\n  }\n  initForm() {\n    const today = new Date();\n    const expiryDate = new Date(today);\n    // Set the time part of the expiry date to match the payment date\n    expiryDate.setHours(today.getHours());\n    expiryDate.setMinutes(today.getMinutes());\n    expiryDate.setSeconds(today.getSeconds());\n    expiryDate.setDate(expiryDate.getDate() + 3); // Default expiry date is 3 days from today\n    this.paymentForm = this.formBuilder.group({\n      amount: [0.1, Validators.required],\n      duration_months: ['0.1', Validators.required],\n      payment_date: [{\n        value: today.toISOString(),\n        disabled: false\n      }],\n      expiry_date: [{\n        value: expiryDate.toISOString(),\n        disabled: false\n      }]\n    });\n  }\n  cancel() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Handle cancel button click, e.g., navigate back\n      console.log('Payment creation canceled');\n      yield _this.modalController.dismiss(null, 'cancel'); // Dismiss with a 'cancel' role\n    })();\n  }\n\n  subscribeToFormChanges() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const durationMonthsControl = _this2.paymentForm.get('duration_months');\n      if (durationMonthsControl) {\n        const valueChanges = durationMonthsControl.valueChanges.toPromise();\n        yield valueChanges;\n        _this2.updateAmountAndExpiryDate();\n      }\n    })();\n  }\n  updateAmountAndExpiryDate() {\n    const durationMonthsControl = this.paymentForm.get('duration_months');\n    if (durationMonthsControl) {\n      const today = new Date();\n      const durationMonths = parseFloat(durationMonthsControl.value);\n      const expiryDate = new Date(today);\n      // Calculate expiry date based on duration months\n      if (durationMonths <= 0.1) {\n        expiryDate.setDate(today.getDate() + 3); // 3 days for 0.1 month\n      } else if (durationMonths === 0.5) {\n        expiryDate.setDate(today.getDate() + 15); // 15 days for 0.5 month\n      } else {\n        expiryDate.setMonth(expiryDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\n      }\n      // Set the time part of the expiry date to match the payment date\n      expiryDate.setHours(today.getHours());\n      expiryDate.setMinutes(today.getMinutes());\n      expiryDate.setSeconds(today.getSeconds());\n      const expiryDateISO = expiryDate.toISOString(); // Get ISO string including time\n      const expiryDateControl = this.paymentForm.get('expiry_date');\n      if (expiryDateControl) {\n        expiryDateControl.setValue(expiryDateISO);\n      }\n      // Calculate amount based on duration months\n      let amount;\n      if (durationMonths <= 0.1) {\n        amount = 0.1;\n      } else if (durationMonths === 0.5) {\n        amount = 0.5;\n      } else {\n        amount = Math.floor(durationMonths);\n      }\n      const amountControl = this.paymentForm.get('amount');\n      if (amountControl) {\n        amountControl.setValue(amount);\n      }\n      // Log the values of all fields\n      console.log('Amount:', amountControl ? amountControl.value : null);\n      console.log('Duration Months:', durationMonths);\n      console.log('Payment Date:', today);\n      console.log('Expiry Date:', expiryDateControl ? expiryDateControl.value : null);\n    }\n  }\n  confirm() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.paymentForm.valid) {\n        const paymentData = _this3.paymentForm.value;\n        yield _this3.presentConfirmationAlert(paymentData); // Display confirmation alert\n      } else {\n        console.error('Payment form is invalid');\n      }\n    })();\n  }\n  presentConfirmationAlert(paymentData) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // console.log('Presenting confirmation alert');\n      const alert = yield _this4.alertController.create({\n        header: 'Confirm Payment',\n        message: `\n            Amount: ${paymentData.amount}\\n\n            Duration (months): ${paymentData.duration_months}\\n\n            Payment Date: ${paymentData.payment_date}\\n\n            Expiry Date: ${paymentData.expiry_date}\\n\n        `,\n        buttons: [{\n          text: 'Cancel',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel button clicked');\n          }\n        }, {\n          text: 'OK',\n          handler: function () {\n            var _ref = _asyncToGenerator(function* () {\n              console.log('OK button clicked');\n              yield _this4.postPayment(paymentData);\n            });\n            return function handler() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        }]\n      });\n      // console.log('Alert created');\n      yield alert.present();\n      // console.log('Alert presented');\n    })();\n  }\n\n  postPayment(paymentData) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Convert duration_months to a numeric value\n        const durationMonthsNumeric = parseFloat(paymentData.duration_months);\n        // Update paymentData with the converted value\n        const paymentDataWithNumericDuration = {\n          ...paymentData,\n          duration_months: durationMonthsNumeric\n        };\n        // Step 1: Insert payment data into the payments table\n        const paymentId = yield _this5.paymentService.makePayment(paymentDataWithNumericDuration);\n        if (paymentId) {\n          const businessOwnerId = yield _this5.userService.getBusinessOwnerId();\n          if (businessOwnerId) {\n            // Step 2: Insert  a record in the business_owners_payments table\n            yield _this5.paymentService.createBusinessOwnersPayments(businessOwnerId, paymentId);\n            // Step 3: Create access control\n            yield _this5.paymentService.createAccessControl(businessOwnerId);\n            // Step 4: Update business owners\n            yield _this5.paymentService.updateBusinessOwners(businessOwnerId);\n            console.log('Payment confirmed:', paymentDataWithNumericDuration);\n            yield _this5.modalController.dismiss(paymentDataWithNumericDuration, 'confirm'); // Dismiss with a 'confirm' role\n            // Alert for successful payment\n            _this5.presentAlerte('Payment successful');\n          } else {\n            console.error('Business owner ID not found.');\n          }\n        } else {\n          console.error('Error making payment.');\n        }\n      } catch (error) {\n        console.error('Error confirming payment:', error);\n      }\n    })();\n  }\n  presentAlerte(message) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this6.alertController.create({\n        header: 'Success',\n        message: message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  presentAlert(message) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this7.alertController.create({\n        header: 'Alert',\n        message: message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  static #_ = this.ɵfac = function CreatePaymentPage_Factory(t) {\n    return new (t || CreatePaymentPage)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.PaymentService), i0.ɵɵdirectiveInject(i4.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatePaymentPage,\n    selectors: [[\"app-create-payment\"]],\n    decls: 44,\n    vars: 1,\n    consts: [[3, \"formGroup\"], [\"position\", \"floating\"], [\"type\", \"number\", \"formControlName\", \"amount\", \"readonly\", \"\"], [\"formControlName\", \"duration_months\", \"interface\", \"popover\", 3, \"ionChange\"], [\"value\", \"0.1\"], [\"value\", \"0.5\"], [\"value\", \"1\"], [\"value\", \"3\"], [\"value\", \"6\"], [\"value\", \"9\"], [\"value\", \"12\"], [\"position\", \"floating\", 1, \"payment-date-label\"], [\"displayFormat\", \"YYYY-MM-DD HH:mm\", \"formControlName\", \"payment_date\", \"readonly\", \"\"], [\"position\", \"floating\", 1, \"expiry-date-label\"], [\"type\", \"text\", \"formControlName\", \"expiry_date\", \"readonly\", \"\", 1, \"custom-input\"], [\"slot\", \"start\"], [\"color\", \"primary\", 3, \"click\"], [\"slot\", \"end\"]],\n    template: function CreatePaymentPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Create Payment\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\")(5, \"form\", 0)(6, \"ion-item\")(7, \"ion-label\", 1);\n        i0.ɵɵtext(8, \"Amount\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"ion-input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-item\")(11, \"ion-label\", 1);\n        i0.ɵɵtext(12, \"Duration (months)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-select\", 3);\n        i0.ɵɵlistener(\"ionChange\", function CreatePaymentPage_Template_ion_select_ionChange_13_listener() {\n          return ctx.updateAmountAndExpiryDate();\n        });\n        i0.ɵɵelementStart(14, \"ion-select-option\", 4);\n        i0.ɵɵtext(15, \"0.1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"ion-select-option\", 5);\n        i0.ɵɵtext(17, \"0.5\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"ion-select-option\", 6);\n        i0.ɵɵtext(19, \"1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ion-select-option\", 7);\n        i0.ɵɵtext(21, \"3\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"ion-select-option\", 8);\n        i0.ɵɵtext(23, \"6\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"ion-select-option\", 9);\n        i0.ɵɵtext(25, \"9\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"ion-select-option\", 10);\n        i0.ɵɵtext(27, \"12\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(28, \"ion-item\")(29, \"ion-label\", 11);\n        i0.ɵɵtext(30, \"Payment Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"ion-datetime\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"ion-item\")(33, \"ion-label\", 13);\n        i0.ɵɵtext(34, \"Expiry Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"ion-input\", 14);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(36, \"ion-footer\")(37, \"ion-toolbar\")(38, \"ion-buttons\", 15)(39, \"ion-button\", 16);\n        i0.ɵɵlistener(\"click\", function CreatePaymentPage_Template_ion_button_click_39_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(40, \"Cancel\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"ion-buttons\", 17)(42, \"ion-button\", 16);\n        i0.ɵɵlistener(\"click\", function CreatePaymentPage_Template_ion_button_click_42_listener() {\n          return ctx.confirm();\n        });\n        i0.ɵɵtext(43, \"Confirm\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.paymentForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i2.IonButton, i2.IonButtons, i2.IonContent, i2.IonDatetime, i2.IonFooter, i2.IonHeader, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonSelect, i2.IonSelectOption, i2.IonTitle, i2.IonToolbar, i2.NumericValueAccessor, i2.SelectValueAccessor, i2.TextValueAccessor, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"ion-label.payment-date-label[_ngcontent-%COMP%], ion-label.expiry-date-label[_ngcontent-%COMP%] {\\n  color: blue; \\n\\n  font-family: var(--ion-font-family);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY3JlYXRlLXBheW1lbnQvY3JlYXRlLXBheW1lbnQucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFLFdBQUEsRUFBQSwyQ0FBQTtFQUNBLG1DQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tbGFiZWwucGF5bWVudC1kYXRlLWxhYmVsLFxyXG5pb24tbGFiZWwuZXhwaXJ5LWRhdGUtbGFiZWwge1xyXG4gIGNvbG9yOiBibHVlOyAvKiBSZXBsYWNlIFwiYmx1ZVwiIHdpdGggeW91ciBkZXNpcmVkIGNvbG9yICovXHJcbiAgZm9udC1mYW1pbHk6IHZhcigtLWlvbi1mb250LWZhbWlseSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","CreatePaymentPage","constructor","formBuilder","modalController","alertController","paymentService","userService","ngOnInit","initForm","subscribeToFormChanges","today","Date","expiryDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setDate","getDate","paymentForm","group","amount","required","duration_months","payment_date","value","toISOString","disabled","expiry_date","cancel","_this","_asyncToGenerator","console","log","dismiss","_this2","durationMonthsControl","get","valueChanges","toPromise","updateAmountAndExpiryDate","durationMonths","parseFloat","setMonth","getMonth","Math","floor","expiryDateISO","expiryDateControl","setValue","amountControl","confirm","_this3","valid","paymentData","presentConfirmationAlert","error","_this4","alert","create","header","message","buttons","text","role","handler","_ref","postPayment","apply","arguments","present","_this5","durationMonthsNumeric","paymentDataWithNumericDuration","paymentId","makePayment","businessOwnerId","getBusinessOwnerId","createBusinessOwnersPayments","createAccessControl","updateBusinessOwners","presentAlerte","_this6","presentAlert","_this7","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ModalController","AlertController","i3","PaymentService","i4","UserService","_2","selectors","decls","vars","consts","template","CreatePaymentPage_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","CreatePaymentPage_Template_ion_select_ionChange_13_listener","CreatePaymentPage_Template_ion_button_click_39_listener","CreatePaymentPage_Template_ion_button_click_42_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\pages\\create-payment\\create-payment.page.ts","C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\pages\\create-payment\\create-payment.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AlertController, ModalController } from '@ionic/angular';\r\nimport { PaymentService } from 'src/app/services/payment.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-create-payment',\r\n  templateUrl: './create-payment.page.html',\r\n  styleUrls: ['./create-payment.page.scss'],\r\n})\r\nexport class CreatePaymentPage implements OnInit {\r\n  paymentForm!: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private modalController: ModalController,\r\n    private alertController: AlertController,\r\n    private paymentService: PaymentService,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n    this.subscribeToFormChanges();\r\n  }\r\n\r\n  initForm() {\r\n    const today = new Date();\r\n    const expiryDate = new Date(today);\r\n    \r\n    // Set the time part of the expiry date to match the payment date\r\n    expiryDate.setHours(today.getHours());\r\n    expiryDate.setMinutes(today.getMinutes());\r\n    expiryDate.setSeconds(today.getSeconds());\r\n  \r\n    expiryDate.setDate(expiryDate.getDate() + 3); // Default expiry date is 3 days from today\r\n  \r\n    this.paymentForm = this.formBuilder.group({\r\n      amount: [0.1, Validators.required],\r\n      duration_months: ['0.1', Validators.required], // Set the default value to '0.1'\r\n      payment_date: [{ value: today.toISOString(), disabled: false }],\r\n      expiry_date: [\r\n        { value: expiryDate.toISOString(), disabled: false },\r\n      ],\r\n    });\r\n  }\r\n  \r\n\r\n  async cancel() {\r\n    // Handle cancel button click, e.g., navigate back\r\n    console.log('Payment creation canceled');\r\n    await this.modalController.dismiss(null, 'cancel'); // Dismiss with a 'cancel' role\r\n  }\r\n\r\n  async subscribeToFormChanges() {\r\n    const durationMonthsControl = this.paymentForm.get('duration_months');\r\n    if (durationMonthsControl) {\r\n      const valueChanges = durationMonthsControl.valueChanges.toPromise();\r\n      await valueChanges;\r\n      this.updateAmountAndExpiryDate();\r\n    }\r\n  }\r\n\r\n  updateAmountAndExpiryDate() {\r\n    const durationMonthsControl = this.paymentForm.get('duration_months');\r\n    if (durationMonthsControl) {\r\n      const today = new Date();\r\n      const durationMonths = parseFloat(durationMonthsControl.value);\r\n      const expiryDate = new Date(today);\r\n  \r\n      // Calculate expiry date based on duration months\r\n      if (durationMonths <= 0.1) {\r\n        expiryDate.setDate(today.getDate() + 3); // 3 days for 0.1 month\r\n      } else if (durationMonths === 0.5) {\r\n        expiryDate.setDate(today.getDate() + 15); // 15 days for 0.5 month\r\n      } else {\r\n        expiryDate.setMonth(expiryDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\r\n      }\r\n  \r\n      // Set the time part of the expiry date to match the payment date\r\n      expiryDate.setHours(today.getHours());\r\n      expiryDate.setMinutes(today.getMinutes());\r\n      expiryDate.setSeconds(today.getSeconds());\r\n  \r\n      const expiryDateISO = expiryDate.toISOString(); // Get ISO string including time\r\n  \r\n      const expiryDateControl = this.paymentForm.get('expiry_date');\r\n      if (expiryDateControl) {\r\n        expiryDateControl.setValue(expiryDateISO);\r\n      }\r\n  \r\n      // Calculate amount based on duration months\r\n      let amount;\r\n      if (durationMonths <= 0.1) {\r\n        amount = 0.1;\r\n      } else if (durationMonths === 0.5) {\r\n        amount = 0.5;\r\n      } else {\r\n        amount = Math.floor(durationMonths);\r\n      }\r\n  \r\n      const amountControl = this.paymentForm.get('amount');\r\n      if (amountControl) {\r\n        amountControl.setValue(amount);\r\n      }\r\n  \r\n      // Log the values of all fields\r\n      console.log('Amount:', amountControl ? amountControl.value : null);\r\n      console.log('Duration Months:', durationMonths);\r\n      console.log('Payment Date:', today);\r\n      console.log('Expiry Date:', expiryDateControl ? expiryDateControl.value : null);\r\n    }\r\n  }\r\n  \r\n  async confirm() {\r\n    if (this.paymentForm.valid) {\r\n      const paymentData = this.paymentForm.value;\r\n      await this.presentConfirmationAlert(paymentData); // Display confirmation alert\r\n    } else {\r\n      console.error('Payment form is invalid');\r\n    }\r\n  }\r\n\r\n  async presentConfirmationAlert(paymentData: any): Promise<void> {\r\n    // console.log('Presenting confirmation alert');\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirm Payment',\r\n      message: `\r\n            Amount: ${paymentData.amount}\\n\r\n            Duration (months): ${paymentData.duration_months}\\n\r\n            Payment Date: ${paymentData.payment_date}\\n\r\n            Expiry Date: ${paymentData.expiry_date}\\n\r\n        `,\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          handler: () => {\r\n            console.log('Cancel button clicked');\r\n          },\r\n        },\r\n        {\r\n          text: 'OK',\r\n          handler: async () => {\r\n            console.log('OK button clicked');\r\n            await this.postPayment(paymentData);\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    // console.log('Alert created');\r\n    await alert.present();\r\n    // console.log('Alert presented');\r\n  }\r\n\r\n  async postPayment(paymentData: any): Promise<void> {\r\n    try {\r\n      // Convert duration_months to a numeric value\r\n      const durationMonthsNumeric = parseFloat(paymentData.duration_months);\r\n  \r\n      // Update paymentData with the converted value\r\n      const paymentDataWithNumericDuration = {\r\n        ...paymentData,\r\n        duration_months: durationMonthsNumeric,\r\n      };\r\n   \r\n      // Step 1: Insert payment data into the payments table\r\n      const paymentId = await this.paymentService.makePayment(paymentDataWithNumericDuration);\r\n  \r\n      if (paymentId) {\r\n        \r\n        const businessOwnerId = await this.userService.getBusinessOwnerId();\r\n        if (businessOwnerId) {\r\n          // Step 2: Insert  a record in the business_owners_payments table\r\n          await this.paymentService.createBusinessOwnersPayments(businessOwnerId, paymentId);\r\n  \r\n          // Step 3: Create access control\r\n          await this.paymentService.createAccessControl(businessOwnerId);\r\n  \r\n          // Step 4: Update business owners\r\n          await this.paymentService.updateBusinessOwners(businessOwnerId);\r\n  \r\n          console.log('Payment confirmed:', paymentDataWithNumericDuration);\r\n          await this.modalController.dismiss(paymentDataWithNumericDuration, 'confirm'); // Dismiss with a 'confirm' role\r\n  \r\n          // Alert for successful payment\r\n          this.presentAlerte('Payment successful');\r\n        } else {\r\n          console.error('Business owner ID not found.');\r\n        }\r\n      } else {\r\n        console.error('Error making payment.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error confirming payment:', error);\r\n    }\r\n  }\r\n  \r\n  async presentAlerte(message: string): Promise<void> {\r\n    const alert = await this.alertController.create({\r\n      header: 'Success',\r\n      message: message,\r\n      buttons: ['OK'],\r\n    });\r\n    await alert.present();\r\n  }\r\n  \r\n\r\n  async presentAlert(message: string): Promise<void> {\r\n    const alert = await this.alertController.create({\r\n      header: 'Alert',\r\n      message: message,\r\n      buttons: ['OK'],\r\n    });\r\n    await alert.present();\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Create Payment</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  <form [formGroup]=\"paymentForm\">\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Amount</ion-label>\r\n      <ion-input type=\"number\" formControlName=\"amount\" readonly></ion-input>\r\n    </ion-item>\r\n\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Duration (months)</ion-label>\r\n      <ion-select formControlName=\"duration_months\" interface=\"popover\" (ionChange)=\"updateAmountAndExpiryDate()\">\r\n        <ion-select-option value=\"0.1\">0.1</ion-select-option>\r\n        <ion-select-option value=\"0.5\">0.5</ion-select-option>\r\n        <ion-select-option value=\"1\">1</ion-select-option>\r\n        <ion-select-option value=\"3\">3</ion-select-option>\r\n        <ion-select-option value=\"6\">6</ion-select-option>\r\n        <ion-select-option value=\"9\">9</ion-select-option>\r\n        <ion-select-option value=\"12\">12</ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n\r\n    <ion-item>\r\n      <ion-label class=\"payment-date-label\" position=\"floating\">Payment Date</ion-label>\r\n      <ion-datetime displayFormat=\"YYYY-MM-DD HH:mm\" formControlName=\"payment_date\" readonly></ion-datetime>\r\n\r\n    </ion-item>\r\n    \r\n    <ion-item>\r\n      <ion-label class=\"expiry-date-label\" position=\"floating\">Expiry Date</ion-label>\r\n      <ion-input type=\"text\" formControlName=\"expiry_date\" class=\"custom-input\" readonly></ion-input>\r\n    </ion-item>\r\n    \r\n\r\n  </form>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-button (click)=\"cancel()\" color=\"primary\">Cancel</ion-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"confirm()\" color=\"primary\">Confirm</ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}