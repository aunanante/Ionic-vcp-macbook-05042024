{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schemaName = schema;\n    this.fetch = fetch;\n  }\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schemaName,\n      fetch: this.fetch\n    });\n  }\n  /**\r\n   * Select a schema to query or perform an function (rpc) call.\r\n   *\r\n   * The schema needs to be on the list of exposed schemas inside Supabase.\r\n   *\r\n   * @param schema - The schema to query\r\n   */\n  schema(schema) {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch\n    });\n  }\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n  rpc(fn, args = {}, {\n    head = false,\n    count\n  } = {}) {\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(([name, value]) => {\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n    const headers = Object.assign({}, this.headers);\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n}","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","Object","assign","schemaName","from","relation","URL","rpc","fn","args","head","count","method","body","entries","forEach","name","value","searchParams","append","allowEmpty"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder';\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\r\nimport { DEFAULT_HEADERS } from './constants';\r\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\r\nexport default class PostgrestClient {\r\n    // TODO: Add back shouldThrowOnError once we figure out the typings\r\n    /**\r\n     * Creates a PostgREST client.\r\n     *\r\n     * @param url - URL of the PostgREST endpoint\r\n     * @param options - Named parameters\r\n     * @param options.headers - Custom headers\r\n     * @param options.schema - Postgres schema to switch to\r\n     * @param options.fetch - Custom fetch\r\n     */\r\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\r\n        this.url = url;\r\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\r\n        this.schemaName = schema;\r\n        this.fetch = fetch;\r\n    }\r\n    /**\r\n     * Perform a query on a table or a view.\r\n     *\r\n     * @param relation - The table or view name to query\r\n     */\r\n    from(relation) {\r\n        const url = new URL(`${this.url}/${relation}`);\r\n        return new PostgrestQueryBuilder(url, {\r\n            headers: Object.assign({}, this.headers),\r\n            schema: this.schemaName,\r\n            fetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Select a schema to query or perform an function (rpc) call.\r\n     *\r\n     * The schema needs to be on the list of exposed schemas inside Supabase.\r\n     *\r\n     * @param schema - The schema to query\r\n     */\r\n    schema(schema) {\r\n        return new PostgrestClient(this.url, {\r\n            headers: this.headers,\r\n            schema,\r\n            fetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform a function call.\r\n     *\r\n     * @param fn - The function name to call\r\n     * @param args - The arguments to pass to the function call\r\n     * @param options - Named parameters\r\n     * @param options.head - When set to `true`, `data` will not be returned.\r\n     * Useful if you only need the count.\r\n     * @param options.count - Count algorithm to use to count rows returned by the\r\n     * function. Only applicable for [set-returning\r\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    rpc(fn, args = {}, { head = false, count, } = {}) {\r\n        let method;\r\n        const url = new URL(`${this.url}/rpc/${fn}`);\r\n        let body;\r\n        if (head) {\r\n            method = 'HEAD';\r\n            Object.entries(args).forEach(([name, value]) => {\r\n                url.searchParams.append(name, `${value}`);\r\n            });\r\n        }\r\n        else {\r\n            method = 'POST';\r\n            body = args;\r\n        }\r\n        const headers = Object.assign({}, this.headers);\r\n        if (count) {\r\n            headers['Prefer'] = `count=${count}`;\r\n        }\r\n        return new PostgrestFilterBuilder({\r\n            method,\r\n            url,\r\n            headers,\r\n            schema: this.schemaName,\r\n            body,\r\n            fetch: this.fetch,\r\n            allowEmpty: false,\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}