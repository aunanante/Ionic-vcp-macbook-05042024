{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class CategoryService {\n  constructor() {\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n  }\n  getCategoriesByCommerceId(commerceId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this.supabase.from('categories').select('*').eq('commerce_id', commerceId).order('id', {\n          ascending: false\n        }); // Order by ID in descending order\n        if (error) {\n          throw error;\n        }\n        return data || [];\n      } catch (error) {\n        console.error('Error fetching categories by commerce ID:', error.message);\n        throw error;\n      }\n    })();\n  }\n  addCategory(categoryData) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Insert the category data into the categories table\n        const {\n          error\n        } = yield _this2.supabase.from('categories').insert(categoryData);\n        if (error) {\n          console.error('Error adding category:', error.message);\n          return false; // Return false in case of error\n        }\n\n        return true; // Return true if category added successfully\n      } catch (error) {\n        console.error('Error adding category:', error.message);\n        return false; // Return false in case of error\n      }\n    })();\n  }\n\n  updateCategory(categoryId, categoryData) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          error\n        } = yield _this3.supabase.from('categories').update(categoryData).eq('id', categoryId);\n        if (error) {\n          console.error('Error updating category:', error.message);\n          return false;\n        }\n        return true;\n      } catch (error) {\n        console.error('Error updating category:', error.message);\n        return false;\n      }\n    })();\n  }\n  deleteCategory(categoryId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Delete the category with the specified ID\n        const {\n          error\n        } = yield _this4.supabase.from('categories').delete().eq('id', categoryId);\n        if (error) {\n          console.error('Error deleting category:', error.message);\n          return false; // Return false in case of error\n        }\n\n        return true; // Return true if category deleted successfully\n      } catch (error) {\n        console.error('Error deleting category:', error.message);\n        return false; // Return false in case of error\n      }\n    })();\n  }\n\n  getCategoryByCategoryId(categoryId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this5.supabase.from('categories').select('*').eq('id', categoryId).single();\n        if (error) {\n          throw error;\n        }\n        return data;\n      } catch (error) {\n        console.error('Error fetching category:', error);\n        throw error;\n      }\n    })();\n  }\n  getCommerceIdByCategoryId(categoryId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this6.supabase.from('categories').select('commerce_id').eq('id', categoryId).single();\n        if (error) {\n          throw error;\n        }\n        return data ? data.commerce_id : null;\n      } catch (error) {\n        console.error('Error fetching commerceId by categoryId:', error);\n        throw error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["createClient","environment","CategoryService","constructor","supabase","supabaseUrl","supabaseKey","getCategoriesByCommerceId","commerceId","_this","_asyncToGenerator","data","error","from","select","eq","order","ascending","console","message","addCategory","categoryData","_this2","insert","updateCategory","categoryId","_this3","update","deleteCategory","_this4","delete","getCategoryByCategoryId","_this5","single","getCommerceIdByCategoryId","_this6","commerce_id","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\services\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\r\nimport { environment } from '../../environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n\r\n  private supabase: SupabaseClient;\r\n\r\n  constructor() {\r\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\r\n  }\r\n\r\n  async getCategoriesByCommerceId(commerceId: number): Promise<any[]> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('categories')\r\n        .select('*')\r\n        .eq('commerce_id', commerceId)\r\n        .order('id', { ascending: false }); // Order by ID in descending order\r\n  \r\n      if (error) {\r\n        throw error;\r\n      }\r\n       \r\n      return data || [];\r\n    } catch (error: any) {\r\n      console.error('Error fetching categories by commerce ID:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n\r\n  async addCategory(categoryData: any): Promise<boolean> {\r\n    try {\r\n      // Insert the category data into the categories table\r\n      const { error } = await this.supabase\r\n        .from('categories')\r\n        .insert(categoryData);\r\n      \r\n      if (error) {\r\n        console.error('Error adding category:', error.message);\r\n        return false; // Return false in case of error\r\n      }\r\n      \r\n      return true; // Return true if category added successfully\r\n    } catch (error: any) {\r\n      console.error('Error adding category:', error.message);\r\n      return false; // Return false in case of error\r\n    }\r\n  }\r\n\r\n  async updateCategory(categoryId: number, categoryData: any): Promise<boolean> {\r\n    try {\r\n      const { error } = await this.supabase\r\n        .from('categories')\r\n        .update(categoryData)\r\n        .eq('id', categoryId);\r\n      \r\n      if (error) {\r\n        console.error('Error updating category:', error.message);\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error: any) {\r\n      console.error('Error updating category:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async deleteCategory(categoryId: number): Promise<boolean> {\r\n    try {\r\n      // Delete the category with the specified ID\r\n      const { error } = await this.supabase\r\n        .from('categories')\r\n        .delete()\r\n        .eq('id', categoryId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting category:', error.message);\r\n        return false; // Return false in case of error\r\n      }\r\n\r\n      return true; // Return true if category deleted successfully\r\n    } catch (error: any) {\r\n      console.error('Error deleting category:', error.message);\r\n      return false; // Return false in case of error\r\n    }\r\n  }\r\n\r\n  async getCategoryByCategoryId(categoryId: number) {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('categories')\r\n        .select('*')\r\n        .eq('id', categoryId)\r\n        .single();\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getCommerceIdByCategoryId(categoryId: number): Promise<number | null> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('categories')\r\n        .select('commerce_id')\r\n        .eq('id', categoryId)\r\n        .single();\r\n  \r\n      if (error) {\r\n        throw error;\r\n      }\r\n  \r\n      return data ? data.commerce_id : null;\r\n    } catch (error) {\r\n      console.error('Error fetching commerceId by categoryId:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}