{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CommerceService {\n  constructor() {\n    this.clickedCommerceSubject = new BehaviorSubject(null);\n    this.commercesSubject = new BehaviorSubject([]);\n    this.commerces$ = this.commercesSubject.asObservable();\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n  }\n  getCommercesByBusinessOwnerWithMonthlyFeePaid(businessOwnerId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Fetch the business owner with the given ID\n        const {\n          data: businessOwner,\n          error\n        } = yield _this.supabase.from('business_owners').select('*').eq('id', businessOwnerId).single();\n        if (error) {\n          throw error;\n        }\n        // Check if the business owner has paid the monthly fee\n        if (businessOwner && businessOwner.monthly_fee_paid) {\n          // Fetch the commerces owned by this business owner\n          const {\n            data: commerces,\n            error: commerceError\n          } = yield _this.supabase.from('commerces').select('*').eq('business_owner_id', businessOwnerId);\n          if (commerceError) {\n            throw commerceError;\n          }\n          return commerces || [];\n        } else {\n          // Business owner has not paid the monthly fee, return empty array\n          return [];\n        }\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  // Fetch all villes from the villes table\n  getAllVilles() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this2.supabase.from('villes').select('*');\n        if (error) {\n          console.error('Error fetching all villes:', error.message);\n          return [];\n        }\n        return data || [];\n      } catch (error) {\n        console.error('Error:', error);\n        throw error;\n      }\n    })();\n  }\n  addCommerce(commerceData) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Perform the insertion and select the newly inserted record\n        const {\n          data,\n          error\n        } = yield _this3.supabase.from('commerces').insert([commerceData]).select('*');\n        if (error) {\n          console.error('Error adding commerce:', error.message);\n          return null;\n        }\n        if (data && data.length > 0) {\n          console.log('Commerce added successfully:', data[0]);\n          return data[0];\n        } else {\n          console.error('Error adding commerce: No data returned');\n          return null;\n        }\n      } catch (error) {\n        console.error('Error adding commerce:', error);\n        return null;\n      }\n    })();\n  }\n  // Fetch ville name by ville ID\n  getVilleNameByVilleId(villeId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this4.supabase.from('villes').select('villename').eq('id', villeId).single();\n        if (error) {\n          console.error('Error fetching ville name by ID:', error.message);\n          return null;\n        }\n        return data ? data.villename : null;\n      } catch (error) {\n        console.error('Error:', error);\n        throw error;\n      }\n    })();\n  }\n  updateCommerce(commerceData) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          id,\n          commercename,\n          image_commerce,\n          services,\n          ville_id\n        } = commerceData;\n        // Check if all required fields are provided\n        if (!id || !commercename || !services || !ville_id) {\n          console.error('Required fields are missing for updating commerce.');\n          return false;\n        }\n        // Perform the update operation\n        const {\n          error\n        } = yield _this5.supabase.from('commerces').update({\n          commercename,\n          image_commerce,\n          services,\n          ville_id\n        }).eq('id', id); // Update the commerce with the provided ID\n        if (error) {\n          console.error('Error updating commerce:', error.message);\n          return false;\n        }\n        console.log('Commerce updated successfully.');\n        return true;\n      } catch (error) {\n        console.error('Error updating commerce:', error);\n        return false;\n      }\n    })();\n  }\n  deleteCommerce(commerceId) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Delete commerce with the provided ID\n        const {\n          error\n        } = yield _this6.supabase.from('commerces').delete().eq('id', commerceId);\n        if (error) {\n          console.error('Error deleting commerce:', error.message);\n          return false; // Return false if there's an error\n        }\n\n        return true; // Return true if deletion is successful\n      } catch (error) {\n        console.error('Error deleting commerce:', error.message);\n        return false; // Return false if there's an error\n      }\n    })();\n  }\n\n  getCommerceById(commerceId) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Fetch commerce with the given ID from the database\n        const {\n          data,\n          error\n        } = yield _this7.supabase.from('commerces').select('*').eq('id', commerceId).single();\n        if (error) {\n          throw error;\n        }\n        return data;\n      } catch (error) {\n        console.error('Error fetching commerce by ID:', error.message);\n        throw error;\n      }\n    })();\n  }\n  getCommercesByVilleId(villeId) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this8.supabase.from('commerces').select(`\n          id,\n          commercename,\n          services,\n          image_commerce,\n          business_owner_id,\n          ville_id,\n          created_at,\n          business_owners (\n            id,\n            email,\n            name,\n            adresse,\n            telephone1,\n            telephone2,\n            monthly_fee_paid\n          )\n        `).eq('ville_id', villeId).order('commercename', {\n          ascending: true\n        });\n        if (error) {\n          console.error('Error fetching commerces by villeId:', error.message);\n          throw error;\n        }\n        return data || [];\n      } catch (error) {\n        console.error('Error:', error);\n        throw error;\n      }\n    })();\n  }\n  searchCommerces(query) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this9.supabase.from('commerces').select(`\n          id,\n          commercename,\n          services,\n          image_commerce,\n          business_owner_id,\n          ville_id,\n          created_at,\n          business_owners (\n            id,\n            email,\n            name,\n            adresse,\n            telephone1,\n            telephone2,\n            monthly_fee_paid\n          )\n        `).or(`commercename.ilike.%${query}%, services.ilike.%${query}%`) // Add search on services field\n        .order('commercename', {\n          ascending: true\n        });\n        if (error) {\n          console.error('Error searching commerces:', error.message);\n          throw error;\n        }\n        return data || [];\n      } catch (error) {\n        console.error('Error:', error);\n        throw error;\n      }\n    })();\n  }\n  getAllCommercesBelongingOwnersWithMonthlyFeePaid() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Fetch all business owners\n        const {\n          data: allBusinessOwners,\n          error: businessOwnersError\n        } = yield _this10.supabase.from('business_owners').select('*');\n        if (businessOwnersError) {\n          throw businessOwnersError;\n        }\n        // Filter business owners who have paid the monthly fee\n        const businessOwnersWithFeePaid = allBusinessOwners.filter(owner => owner.monthly_fee_paid);\n        // Fetch commerces owned by business owners who have paid the monthly fee\n        const allCommerces = yield Promise.all(businessOwnersWithFeePaid.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (owner) {\n            const {\n              data: commerces,\n              error: commerceError\n            } = yield _this10.supabase.from('commerces').select('*').eq('business_owner_id', owner.id);\n            if (commerceError) {\n              throw commerceError;\n            }\n            return commerces || [];\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n        // Flatten the array of arrays into a single array\n        const allCommercesFlat = allCommerces.flat();\n        return allCommercesFlat;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  // Method to set the clicked commerce\n  setClickedCommerce(commerce) {\n    this.clickedCommerceSubject.next(commerce);\n  }\n  // Method to get the clicked commerce as an Observable\n  getClickedCommerce() {\n    return this.clickedCommerceSubject.asObservable();\n  }\n  setCommerces(commerces) {\n    this.commercesSubject.next(commerces);\n  }\n  // Method to fetch all commerces from Supabase\n  fetchCommerces() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield _this11.supabase.from('commerces').select('*');\n        if (response.error) {\n          console.error('Error fetching commerces:', response.error.message);\n          return [];\n        }\n        _this11.commercesSubject.next(response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching commerces:', error.message);\n        return [];\n      }\n    })();\n  }\n  // Method to search commerces based on commercename or services\n  searchingCommerces(searchTerm) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      searchTerm = searchTerm.toLowerCase(); // Convert search term to lowercase\n      try {\n        const response = yield _this12.supabase.from('commerces').select('*');\n        if (response.error) {\n          console.error('Error searching commerces:', response.error.message);\n          return [];\n        }\n        const filteredCommerces = response.data.filter(commerce => {\n          return commerce.commercename.toLowerCase().includes(searchTerm) || commerce.services.toLowerCase().includes(searchTerm);\n        });\n        _this12.commercesSubject.next(filteredCommerces);\n        return filteredCommerces;\n      } catch (error) {\n        console.error('Error searching commerces:', error.message);\n        return [];\n      }\n    })();\n  }\n  getVillesFromCommerces(commerces) {\n    // Initialize an empty array to store unique ville objects\n    const villesList = [];\n    // Iterate over the commerces array\n    for (const commerce of commerces) {\n      // Check if the commerce has ville_id and villeName properties\n      if (commerce.ville_id && commerce.villeName) {\n        // Check if the ville_id is not already in the villesList\n        if (!villesList.some(ville => ville.ville_id === commerce.ville_id)) {\n          // Add the ville_id and villeName to the villesList array\n          villesList.push({\n            ville_id: commerce.ville_id,\n            villeName: commerce.villeName\n          });\n        }\n      }\n    }\n    // Return the list of unique ville objects\n    return villesList;\n  }\n  static #_ = this.ɵfac = function CommerceService_Factory(t) {\n    return new (t || CommerceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommerceService,\n    factory: CommerceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["createClient","environment","BehaviorSubject","CommerceService","constructor","clickedCommerceSubject","commercesSubject","commerces$","asObservable","supabase","supabaseUrl","supabaseKey","getCommercesByBusinessOwnerWithMonthlyFeePaid","businessOwnerId","_this","_asyncToGenerator","data","businessOwner","error","from","select","eq","single","monthly_fee_paid","commerces","commerceError","getAllVilles","_this2","console","message","addCommerce","commerceData","_this3","insert","length","log","getVilleNameByVilleId","villeId","_this4","villename","updateCommerce","_this5","id","commercename","image_commerce","services","ville_id","update","deleteCommerce","commerceId","_this6","delete","getCommerceById","_this7","getCommercesByVilleId","_this8","order","ascending","searchCommerces","query","_this9","or","getAllCommercesBelongingOwnersWithMonthlyFeePaid","_this10","allBusinessOwners","businessOwnersError","businessOwnersWithFeePaid","filter","owner","allCommerces","Promise","all","map","_ref","_x","apply","arguments","allCommercesFlat","flat","setClickedCommerce","commerce","next","getClickedCommerce","setCommerces","fetchCommerces","_this11","response","searchingCommerces","searchTerm","_this12","toLowerCase","filteredCommerces","includes","getVillesFromCommerces","villesList","villeName","some","ville","push","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\services\\commerce.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\nimport { environment } from '../../environments/environment';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommerceService {\r\n\r\n  private supabase: SupabaseClient;\r\n  private clickedCommerceSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  private commercesSubject = new BehaviorSubject<any[]>([]);\r\n  commerces$ = this.commercesSubject.asObservable();\r\n\r\n\r\n  constructor() {\r\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\r\n  }\r\n\r\n  async getCommercesByBusinessOwnerWithMonthlyFeePaid(businessOwnerId: string): Promise<any[]> {\r\n    try {\r\n      // Fetch the business owner with the given ID\r\n      const { data: businessOwner, error } = await this.supabase\r\n        .from('business_owners')\r\n        .select('*')\r\n        .eq('id', businessOwnerId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Check if the business owner has paid the monthly fee\r\n      if (businessOwner && businessOwner.monthly_fee_paid) {\r\n        // Fetch the commerces owned by this business owner\r\n        const { data: commerces, error: commerceError } = await this.supabase\r\n          .from('commerces')\r\n          .select('*')\r\n          .eq('business_owner_id', businessOwnerId);\r\n        if (commerceError) {\r\n          throw commerceError;\r\n        }\r\n\r\n        return commerces || [];\r\n      } else {\r\n        // Business owner has not paid the monthly fee, return empty array\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Fetch all villes from the villes table\r\n  async getAllVilles(): Promise<any[]> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('villes')\r\n        .select('*');\r\n\r\n      if (error) {\r\n        console.error('Error fetching all villes:', error.message);\r\n        return [];\r\n      }\r\n\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addCommerce(commerceData: any): Promise<any | null> {\r\n    try {\r\n      // Perform the insertion and select the newly inserted record\r\n      const { data, error } = await this.supabase\r\n        .from('commerces')\r\n        .insert([commerceData])\r\n        .select('*');\r\n  \r\n      if (error) {\r\n        console.error('Error adding commerce:', error.message);\r\n        return null;\r\n      }\r\n  \r\n      if (data && data.length > 0) {\r\n        console.log('Commerce added successfully:', data[0]);\r\n        return data[0];\r\n      } else {\r\n        console.error('Error adding commerce: No data returned');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding commerce:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Fetch ville name by ville ID\r\n  async getVilleNameByVilleId(villeId: number): Promise<string | null> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('villes')\r\n        .select('villename')\r\n        .eq('id', villeId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error fetching ville name by ID:', error.message);\r\n        return null;\r\n      }\r\n\r\n      return data ? data.villename : null;\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateCommerce(commerceData: any): Promise<boolean> {\r\n    try {\r\n      const { id, commercename, image_commerce, services, ville_id } = commerceData;\r\n  \r\n      // Check if all required fields are provided\r\n      if (!id || !commercename || !services || !ville_id) {\r\n        console.error('Required fields are missing for updating commerce.');\r\n        return false;\r\n      }\r\n  \r\n      // Perform the update operation\r\n      const { error } = await this.supabase\r\n        .from('commerces')\r\n        .update({\r\n          commercename,\r\n          image_commerce,\r\n          services,\r\n          ville_id\r\n        })\r\n        .eq('id', id); // Update the commerce with the provided ID\r\n  \r\n      if (error) {\r\n        console.error('Error updating commerce:', error.message);\r\n        return false;\r\n      }\r\n  \r\n      console.log('Commerce updated successfully.');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating commerce:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async deleteCommerce(commerceId: number): Promise<boolean> {\r\n    try {\r\n      // Delete commerce with the provided ID\r\n      const { error } = await this.supabase\r\n        .from('commerces')\r\n        .delete()\r\n        .eq('id', commerceId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting commerce:', error.message);\r\n        return false; // Return false if there's an error\r\n      }\r\n\r\n      return true; // Return true if deletion is successful\r\n    } catch (error) {\r\n      console.error('Error deleting commerce:', (error as Error).message);\r\n      return false; // Return false if there's an error\r\n    }\r\n  }\r\n  \r\n  async getCommerceById(commerceId: number) {\r\n    try {\r\n      // Fetch commerce with the given ID from the database\r\n      const { data, error } = await this.supabase\r\n        .from('commerces')\r\n        .select('*')\r\n        .eq('id', commerceId)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      return data;\r\n    } catch (error: any) {\r\n      console.error('Error fetching commerce by ID:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getCommercesByVilleId(villeId: number): Promise<any[]> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('commerces')\r\n        .select(`\r\n          id,\r\n          commercename,\r\n          services,\r\n          image_commerce,\r\n          business_owner_id,\r\n          ville_id,\r\n          created_at,\r\n          business_owners (\r\n            id,\r\n            email,\r\n            name,\r\n            adresse,\r\n            telephone1,\r\n            telephone2,\r\n            monthly_fee_paid\r\n          )\r\n        `)\r\n        .eq('ville_id', villeId)\r\n        .order('commercename', { ascending: true });\r\n  \r\n      if (error) {\r\n        console.error('Error fetching commerces by villeId:', error.message);\r\n        throw error;\r\n      }\r\n  \r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async searchCommerces(query: string): Promise<any[]> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('commerces')\r\n        .select(`\r\n          id,\r\n          commercename,\r\n          services,\r\n          image_commerce,\r\n          business_owner_id,\r\n          ville_id,\r\n          created_at,\r\n          business_owners (\r\n            id,\r\n            email,\r\n            name,\r\n            adresse,\r\n            telephone1,\r\n            telephone2,\r\n            monthly_fee_paid\r\n          )\r\n        `)\r\n        .or(`commercename.ilike.%${query}%, services.ilike.%${query}%`) // Add search on services field\r\n        .order('commercename', { ascending: true });\r\n  \r\n      if (error) {\r\n        console.error('Error searching commerces:', error.message);\r\n        throw error;\r\n      }\r\n  \r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async getAllCommercesBelongingOwnersWithMonthlyFeePaid(): Promise<any[]> {\r\n    try {\r\n      // Fetch all business owners\r\n      const { data: allBusinessOwners, error: businessOwnersError } = await this.supabase\r\n        .from('business_owners')\r\n        .select('*');\r\n  \r\n      if (businessOwnersError) {\r\n        throw businessOwnersError;\r\n      }\r\n  \r\n      // Filter business owners who have paid the monthly fee\r\n      const businessOwnersWithFeePaid = allBusinessOwners.filter(owner => owner.monthly_fee_paid);\r\n  \r\n      // Fetch commerces owned by business owners who have paid the monthly fee\r\n      const allCommerces = await Promise.all(businessOwnersWithFeePaid.map(async owner => {\r\n        const { data: commerces, error: commerceError } = await this.supabase\r\n          .from('commerces')\r\n          .select('*')\r\n          .eq('business_owner_id', owner.id);\r\n  \r\n        if (commerceError) {\r\n          throw commerceError;\r\n        }\r\n  \r\n        return commerces || [];\r\n      }));\r\n  \r\n      // Flatten the array of arrays into a single array\r\n      const allCommercesFlat = allCommerces.flat();\r\n  \r\n      return allCommercesFlat;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n\r\n  // Method to set the clicked commerce\r\n  setClickedCommerce(commerce: any) {\r\n    this.clickedCommerceSubject.next(commerce);\r\n  }\r\n\r\n  // Method to get the clicked commerce as an Observable\r\n  getClickedCommerce() {\r\n    return this.clickedCommerceSubject.asObservable();\r\n  }\r\n\r\n  setCommerces(commerces: any[]) {\r\n    this.commercesSubject.next(commerces);\r\n  }\r\n\r\n  // Method to fetch all commerces from Supabase\r\n  async fetchCommerces() {\r\n    try {\r\n      const response = await this.supabase.from('commerces').select('*');\r\n      if (response.error) {\r\n        console.error('Error fetching commerces:', response.error.message);\r\n        return [];\r\n      }\r\n      this.commercesSubject.next(response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Error fetching commerces:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Method to search commerces based on commercename or services\r\n  async searchingCommerces(searchTerm: string) {\r\n    searchTerm = searchTerm.toLowerCase(); // Convert search term to lowercase\r\n    try {\r\n      const response = await this.supabase.from('commerces').select('*');\r\n      if (response.error) {\r\n        console.error('Error searching commerces:', response.error.message);\r\n        return [];\r\n      }\r\n      const filteredCommerces = response.data.filter((commerce) => {\r\n        return (\r\n          commerce.commercename.toLowerCase().includes(searchTerm) ||\r\n          commerce.services.toLowerCase().includes(searchTerm)\r\n        );\r\n      });\r\n      this.commercesSubject.next(filteredCommerces);\r\n      return filteredCommerces;\r\n    } catch (error: any) {\r\n      console.error('Error searching commerces:', error.message);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getVillesFromCommerces(commerces: any[]): { id: number, villeName: string }[] {\r\n    // Initialize an empty array to store unique ville objects\r\n    const villesList: { ville_id: number, villeName: string }[] = [];\r\n\r\n    // Iterate over the commerces array\r\n    for (const commerce of commerces) {\r\n      // Check if the commerce has ville_id and villeName properties\r\n      if (commerce.ville_id && commerce.villeName) {\r\n        // Check if the ville_id is not already in the villesList\r\n        if (!villesList.some(ville => ville.ville_id === commerce.ville_id)) {\r\n          // Add the ville_id and villeName to the villesList array\r\n          villesList.push({ ville_id: commerce.ville_id, villeName: commerce.villeName });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Return the list of unique ville objects\r\n    return villesList;\r\n}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}