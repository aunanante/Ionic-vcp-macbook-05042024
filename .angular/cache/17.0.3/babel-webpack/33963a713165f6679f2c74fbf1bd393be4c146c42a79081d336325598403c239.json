{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({\n          method,\n          body: body,\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Upload a file with a token generated from `createSignedUploadUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createSignedUploadUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n      const _path = this._getFinalPath(cleanPath);\n      const url = new URL(this.url + `/object/upload/sign/${_path}`);\n      url.searchParams.set('token', token);\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n        const res = yield this.fetch(url.toString(), {\n          method: 'PUT',\n          body: body,\n          headers\n        });\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n   * They are valid for 2 hours.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   */\n  createSignedUploadUrl(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n          headers: this.headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n      try {\n        const _path = this._getFinalPath(path);\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n    let queryString = _queryString.join('&');\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n  transformOptsToQueryString(transform) {\n    const params = [];\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`);\n    }\n    return params.join('&');\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isStorageError","StorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","duplex","ok","data","error","json","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","copy","Key","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","replace","params","width","height","resize","format","quality"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { isStorageError, StorageError } from '../lib/errors';\r\nimport { get, post, remove } from '../lib/fetch';\r\nimport { resolveFetch } from '../lib/helpers';\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n    limit: 100,\r\n    offset: 0,\r\n    sortBy: {\r\n        column: 'name',\r\n        order: 'asc',\r\n    },\r\n};\r\nconst DEFAULT_FILE_OPTIONS = {\r\n    cacheControl: '3600',\r\n    contentType: 'text/plain;charset=UTF-8',\r\n    upsert: false,\r\n};\r\nexport default class StorageFileApi {\r\n    constructor(url, headers = {}, bucketId, fetch) {\r\n        this.url = url;\r\n        this.headers = headers;\r\n        this.bucketId = bucketId;\r\n        this.fetch = resolveFetch(fetch);\r\n    }\r\n    /**\r\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n     *\r\n     * @param method HTTP method.\r\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let body;\r\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\r\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\r\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n                    body = new FormData();\r\n                    body.append('cacheControl', options.cacheControl);\r\n                    body.append('', fileBody);\r\n                }\r\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n                    body = fileBody;\r\n                    body.append('cacheControl', options.cacheControl);\r\n                }\r\n                else {\r\n                    body = fileBody;\r\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\r\n                    headers['content-type'] = options.contentType;\r\n                }\r\n                const cleanPath = this._removeEmptyFolders(path);\r\n                const _path = this._getFinalPath(cleanPath);\r\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\r\n                if (res.ok) {\r\n                    return {\r\n                        data: { path: cleanPath },\r\n                        error: null,\r\n                    };\r\n                }\r\n                else {\r\n                    const error = yield res.json();\r\n                    return { data: null, error };\r\n                }\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Uploads a file to an existing bucket.\r\n     *\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    upload(path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\r\n        });\r\n    }\r\n    /**\r\n     * Upload a file with a token generated from `createSignedUploadUrl`.\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param token The token generated from `createSignedUploadUrl`\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const cleanPath = this._removeEmptyFolders(path);\r\n            const _path = this._getFinalPath(cleanPath);\r\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\r\n            url.searchParams.set('token', token);\r\n            try {\r\n                let body;\r\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\r\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\r\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n                    body = new FormData();\r\n                    body.append('cacheControl', options.cacheControl);\r\n                    body.append('', fileBody);\r\n                }\r\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n                    body = fileBody;\r\n                    body.append('cacheControl', options.cacheControl);\r\n                }\r\n                else {\r\n                    body = fileBody;\r\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\r\n                    headers['content-type'] = options.contentType;\r\n                }\r\n                const res = yield this.fetch(url.toString(), {\r\n                    method: 'PUT',\r\n                    body: body,\r\n                    headers,\r\n                });\r\n                if (res.ok) {\r\n                    return {\r\n                        data: { path: cleanPath },\r\n                        error: null,\r\n                    };\r\n                }\r\n                else {\r\n                    const error = yield res.json();\r\n                    return { data: null, error };\r\n                }\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a signed upload URL.\r\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n     * They are valid for 2 hours.\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     */\r\n    createSignedUploadUrl(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let _path = this._getFinalPath(path);\r\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers: this.headers });\r\n                const url = new URL(this.url + data.url);\r\n                const token = url.searchParams.get('token');\r\n                if (!token) {\r\n                    throw new StorageError('No token returned by API');\r\n                }\r\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Replaces an existing file at the specified path with a new one.\r\n     *\r\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    update(path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\r\n        });\r\n    }\r\n    /**\r\n     * Moves an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n     */\r\n    move(fromPath, toPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Copies an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n     */\r\n    copy(fromPath, toPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\r\n                return { data: { path: data.Key }, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    createSignedUrl(path, expiresIn, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let _path = this._getFinalPath(path);\r\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\r\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n                    ? `&download=${options.download === true ? '' : options.download}`\r\n                    : '';\r\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\r\n                data = { signedUrl };\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     */\r\n    createSignedUrls(paths, expiresIn, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\r\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n                    ? `&download=${options.download === true ? '' : options.download}`\r\n                    : '';\r\n                return {\r\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\r\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n                            : null }))),\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n     *\r\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    download(path, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\r\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\r\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\r\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\r\n            try {\r\n                const _path = this._getFinalPath(path);\r\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n                    headers: this.headers,\r\n                    noResolveJson: true,\r\n                });\r\n                const data = yield res.blob();\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n     *\r\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    getPublicUrl(path, options) {\r\n        const _path = this._getFinalPath(path);\r\n        const _queryString = [];\r\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n            ? `download=${options.download === true ? '' : options.download}`\r\n            : '';\r\n        if (downloadQueryParam !== '') {\r\n            _queryString.push(downloadQueryParam);\r\n        }\r\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\r\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\r\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\r\n        if (transformationQuery !== '') {\r\n            _queryString.push(transformationQuery);\r\n        }\r\n        let queryString = _queryString.join('&');\r\n        if (queryString !== '') {\r\n            queryString = `?${queryString}`;\r\n        }\r\n        return {\r\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n        };\r\n    }\r\n    /**\r\n     * Deletes files within the same bucket\r\n     *\r\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n     */\r\n    remove(paths) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Get file metadata\r\n     * @param id the file id to retrieve metadata\r\n     */\r\n    // async getMetadata(\r\n    //   id: string\r\n    // ): Promise<\r\n    //   | {\r\n    //       data: Metadata\r\n    //       error: null\r\n    //     }\r\n    //   | {\r\n    //       data: null\r\n    //       error: StorageError\r\n    //     }\r\n    // > {\r\n    //   try {\r\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n    //     return { data, error: null }\r\n    //   } catch (error) {\r\n    //     if (isStorageError(error)) {\r\n    //       return { data: null, error }\r\n    //     }\r\n    //     throw error\r\n    //   }\r\n    // }\r\n    /**\r\n     * Update file metadata\r\n     * @param id the file id to update metadata\r\n     * @param meta the new file metadata\r\n     */\r\n    // async updateMetadata(\r\n    //   id: string,\r\n    //   meta: Metadata\r\n    // ): Promise<\r\n    //   | {\r\n    //       data: Metadata\r\n    //       error: null\r\n    //     }\r\n    //   | {\r\n    //       data: null\r\n    //       error: StorageError\r\n    //     }\r\n    // > {\r\n    //   try {\r\n    //     const data = await post(\r\n    //       this.fetch,\r\n    //       `${this.url}/metadata/${id}`,\r\n    //       { ...meta },\r\n    //       { headers: this.headers }\r\n    //     )\r\n    //     return { data, error: null }\r\n    //   } catch (error) {\r\n    //     if (isStorageError(error)) {\r\n    //       return { data: null, error }\r\n    //     }\r\n    //     throw error\r\n    //   }\r\n    // }\r\n    /**\r\n     * Lists all the files within a bucket.\r\n     * @param path The folder path.\r\n     */\r\n    list(path, options, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\r\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (isStorageError(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    _getFinalPath(path) {\r\n        return `${this.bucketId}/${path}`;\r\n    }\r\n    _removeEmptyFolders(path) {\r\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\r\n    }\r\n    transformOptsToQueryString(transform) {\r\n        const params = [];\r\n        if (transform.width) {\r\n            params.push(`width=${transform.width}`);\r\n        }\r\n        if (transform.height) {\r\n            params.push(`height=${transform.height}`);\r\n        }\r\n        if (transform.resize) {\r\n            params.push(`resize=${transform.resize}`);\r\n        }\r\n        if (transform.format) {\r\n            params.push(`format=${transform.format}`);\r\n        }\r\n        if (transform.quality) {\r\n            params.push(`quality=${transform.quality}`);\r\n        }\r\n        return params.join('&');\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}