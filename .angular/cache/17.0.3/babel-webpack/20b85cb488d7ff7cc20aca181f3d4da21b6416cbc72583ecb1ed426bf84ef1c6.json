{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nconst DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\nexport default class SupabaseClient {\n  /**\r\n   * Create a new client for use in the browser.\r\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n   * @param options.realtime Options passed along to realtime-js constructor.\r\n   * @param options.global.fetch A custom fetch implementation.\r\n   * @param options.global.headers Any additional headers to send with each network request.\r\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n    this._listenForAuthEvents();\n  }\n  /**\r\n   * Supabase Functions allows you to deploy and invoke edge functions.\r\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\r\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  /**\r\n   * Perform a query on a schema distinct from the default schema supplied via\r\n   * the `options.db.schema` constructor parameter.\r\n   *\r\n   * The schema needs to be on the list of exposed schemas inside Supabase.\r\n   *\r\n   * @param schema - The name of the schema to query\r\n   */\n  schema(schema) {\n    return this.rest.schema(schema);\n  }\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\n  rpc(fn, args = {}, options) {\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\r\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n   *\r\n   * @param {string} name - The name of the Realtime channel.\r\n   * @param {Object} opts - The options to pass to the Realtime channel.\r\n   *\r\n   */\n  channel(name, opts = {\n    config: {}\n  }) {\n    return this.realtime.channel(name, opts);\n  }\n  /**\r\n   * Returns all Realtime channels.\r\n   */\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\r\n   * Unsubscribes and removes Realtime channel from Realtime client.\r\n   *\r\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n   *\r\n   */\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\r\n   * Unsubscribes and removes all Realtime channels from Realtime client.\r\n   */\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n  _getAccessToken() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    storage,\n    storageKey,\n    flowType,\n    debug\n  }, headers, fetch) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch\n    });\n  }\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n    });\n    return data;\n  }\n  _handleTokenChanged(event, source, token) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n      this.changedAccessToken = undefined;\n    }\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","_a","_b","_c","_d","_e","_f","_g","_h","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_initSupabaseAuthClient","fetch","_getAccessToken","bind","_initRealtimeClient","rest","_listenForAuthEvents","functions","customFetch","storage","from","relation","rpc","fn","args","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","debug","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","undefined"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { FunctionsClient } from '@supabase/functions-js';\r\nimport { PostgrestClient, } from '@supabase/postgrest-js';\r\nimport { RealtimeClient, } from '@supabase/realtime-js';\r\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\r\nimport { DEFAULT_HEADERS } from './lib/constants';\r\nimport { fetchWithAuth } from './lib/fetch';\r\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\r\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\r\nconst DEFAULT_GLOBAL_OPTIONS = {\r\n    headers: DEFAULT_HEADERS,\r\n};\r\nconst DEFAULT_DB_OPTIONS = {\r\n    schema: 'public',\r\n};\r\nconst DEFAULT_AUTH_OPTIONS = {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n    flowType: 'implicit',\r\n};\r\nconst DEFAULT_REALTIME_OPTIONS = {};\r\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\r\nexport default class SupabaseClient {\r\n    /**\r\n     * Create a new client for use in the browser.\r\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n     * @param options.realtime Options passed along to realtime-js constructor.\r\n     * @param options.global.fetch A custom fetch implementation.\r\n     * @param options.global.headers Any additional headers to send with each network request.\r\n     */\r\n    constructor(supabaseUrl, supabaseKey, options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        this.supabaseUrl = supabaseUrl;\r\n        this.supabaseKey = supabaseKey;\r\n        if (!supabaseUrl)\r\n            throw new Error('supabaseUrl is required.');\r\n        if (!supabaseKey)\r\n            throw new Error('supabaseKey is required.');\r\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\r\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\r\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\r\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\r\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\r\n        // default storage key uses the supabase project ref as a namespace\r\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\r\n        const DEFAULTS = {\r\n            db: DEFAULT_DB_OPTIONS,\r\n            realtime: DEFAULT_REALTIME_OPTIONS,\r\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\r\n            global: DEFAULT_GLOBAL_OPTIONS,\r\n        };\r\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\r\n        this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\r\n        this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\r\n        this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\r\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\r\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\r\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\r\n            headers: this.headers,\r\n            schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\r\n            fetch: this.fetch,\r\n        });\r\n        this._listenForAuthEvents();\r\n    }\r\n    /**\r\n     * Supabase Functions allows you to deploy and invoke edge functions.\r\n     */\r\n    get functions() {\r\n        return new FunctionsClient(this.functionsUrl, {\r\n            headers: this.headers,\r\n            customFetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n     */\r\n    get storage() {\r\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\r\n    }\r\n    /**\r\n     * Perform a query on a table or a view.\r\n     *\r\n     * @param relation - The table or view name to query\r\n     */\r\n    from(relation) {\r\n        return this.rest.from(relation);\r\n    }\r\n    /**\r\n     * Perform a query on a schema distinct from the default schema supplied via\r\n     * the `options.db.schema` constructor parameter.\r\n     *\r\n     * The schema needs to be on the list of exposed schemas inside Supabase.\r\n     *\r\n     * @param schema - The name of the schema to query\r\n     */\r\n    schema(schema) {\r\n        return this.rest.schema(schema);\r\n    }\r\n    /**\r\n     * Perform a function call.\r\n     *\r\n     * @param fn - The function name to call\r\n     * @param args - The arguments to pass to the function call\r\n     * @param options - Named parameters\r\n     * @param options.head - When set to `true`, `data` will not be returned.\r\n     * Useful if you only need the count.\r\n     * @param options.count - Count algorithm to use to count rows returned by the\r\n     * function. Only applicable for [set-returning\r\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    rpc(fn, args = {}, options) {\r\n        return this.rest.rpc(fn, args, options);\r\n    }\r\n    /**\r\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n     *\r\n     * @param {string} name - The name of the Realtime channel.\r\n     * @param {Object} opts - The options to pass to the Realtime channel.\r\n     *\r\n     */\r\n    channel(name, opts = { config: {} }) {\r\n        return this.realtime.channel(name, opts);\r\n    }\r\n    /**\r\n     * Returns all Realtime channels.\r\n     */\r\n    getChannels() {\r\n        return this.realtime.getChannels();\r\n    }\r\n    /**\r\n     * Unsubscribes and removes Realtime channel from Realtime client.\r\n     *\r\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n     *\r\n     */\r\n    removeChannel(channel) {\r\n        return this.realtime.removeChannel(channel);\r\n    }\r\n    /**\r\n     * Unsubscribes and removes all Realtime channels from Realtime client.\r\n     */\r\n    removeAllChannels() {\r\n        return this.realtime.removeAllChannels();\r\n    }\r\n    _getAccessToken() {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { data } = yield this.auth.getSession();\r\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\r\n        });\r\n    }\r\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, debug, }, headers, fetch) {\r\n        const authHeaders = {\r\n            Authorization: `Bearer ${this.supabaseKey}`,\r\n            apikey: `${this.supabaseKey}`,\r\n        };\r\n        return new SupabaseAuthClient({\r\n            url: this.authUrl,\r\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\r\n            storageKey: storageKey,\r\n            autoRefreshToken,\r\n            persistSession,\r\n            detectSessionInUrl,\r\n            storage,\r\n            flowType,\r\n            debug,\r\n            fetch,\r\n        });\r\n    }\r\n    _initRealtimeClient(options) {\r\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\r\n    }\r\n    _listenForAuthEvents() {\r\n        let data = this.auth.onAuthStateChange((event, session) => {\r\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\r\n        });\r\n        return data;\r\n    }\r\n    _handleTokenChanged(event, source, token) {\r\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\r\n            this.changedAccessToken !== token) {\r\n            // Token has changed\r\n            this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\r\n            this.changedAccessToken = token;\r\n        }\r\n        else if (event === 'SIGNED_OUT') {\r\n            // Token is removed\r\n            this.realtime.setAuth(this.supabaseKey);\r\n            if (source == 'STORAGE')\r\n                this.auth.signOut();\r\n            this.changedAccessToken = undefined;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}