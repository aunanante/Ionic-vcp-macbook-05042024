{"ast":null,"code":"/**\r\n * Helpers to convert the change Payload into native JS types.\r\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n  PostgresTypes[\"abstime\"] = \"abstime\";\n  PostgresTypes[\"bool\"] = \"bool\";\n  PostgresTypes[\"date\"] = \"date\";\n  PostgresTypes[\"daterange\"] = \"daterange\";\n  PostgresTypes[\"float4\"] = \"float4\";\n  PostgresTypes[\"float8\"] = \"float8\";\n  PostgresTypes[\"int2\"] = \"int2\";\n  PostgresTypes[\"int4\"] = \"int4\";\n  PostgresTypes[\"int4range\"] = \"int4range\";\n  PostgresTypes[\"int8\"] = \"int8\";\n  PostgresTypes[\"int8range\"] = \"int8range\";\n  PostgresTypes[\"json\"] = \"json\";\n  PostgresTypes[\"jsonb\"] = \"jsonb\";\n  PostgresTypes[\"money\"] = \"money\";\n  PostgresTypes[\"numeric\"] = \"numeric\";\n  PostgresTypes[\"oid\"] = \"oid\";\n  PostgresTypes[\"reltime\"] = \"reltime\";\n  PostgresTypes[\"text\"] = \"text\";\n  PostgresTypes[\"time\"] = \"time\";\n  PostgresTypes[\"timestamp\"] = \"timestamp\";\n  PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n  PostgresTypes[\"timetz\"] = \"timetz\";\n  PostgresTypes[\"tsrange\"] = \"tsrange\";\n  PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\r\n * Takes an array of columns and an object of string values then converts each string value\r\n * to its mapped type.\r\n *\r\n * @param {{name: String, type: String}[]} columns\r\n * @param {Object} record\r\n * @param {Object} options The map of various options that can be applied to the mapper\r\n * @param {Array} options.skipTypes The array of types that should not be converted\r\n *\r\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\r\n * //=>{ first_name: 'Paul', age: 33 }\r\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n  var _a;\n  const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n    return acc;\n  }, {});\n};\n/**\r\n * Converts the value of an individual column.\r\n *\r\n * @param {String} columnName The column that you want to convert\r\n * @param {{name: String, type: String}[]} columns All of the columns\r\n * @param {Object} record The map of string values\r\n * @param {Array} skipTypes An array of types that should not be converted\r\n * @return {object} Useless information\r\n *\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\r\n * //=> 33\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\r\n * //=> \"33\"\r\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n  const column = columns.find(x => x.name === columnName);\n  const colType = column === null || column === void 0 ? void 0 : column.type;\n  const value = record[columnName];\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value);\n  }\n  return noop(value);\n};\n/**\r\n * If the value of the cell is `null`, returns null.\r\n * Otherwise converts the string value to the correct type.\r\n * @param {String} type A postgres column type\r\n * @param {String} value The cell value\r\n *\r\n * @example convertCell('bool', 't')\r\n * //=> true\r\n * @example convertCell('int8', '10')\r\n * //=> 10\r\n * @example convertCell('_int4', '{1,2,3,4}')\r\n * //=> [1,2,3,4]\r\n */\nexport const convertCell = (type, value) => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length);\n    return toArray(value, dataType);\n  }\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value);\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value);\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value);\n    case PostgresTypes.timestamp:\n      return toTimestampString(value);\n    // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value);\n    default:\n      // Return the value for remaining types\n      return noop(value);\n  }\n};\nconst noop = value => {\n  return value;\n};\nexport const toBoolean = value => {\n  switch (value) {\n    case 't':\n      return true;\n    case 'f':\n      return false;\n    default:\n      return value;\n  }\n};\nexport const toNumber = value => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value);\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n  return value;\n};\nexport const toJson = value => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`);\n      return value;\n    }\n  }\n  return value;\n};\n/**\r\n * Converts a Postgres Array into a native JS array\r\n *\r\n * @example toArray('{}', 'int4')\r\n * //=> []\r\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\r\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\r\n * @example toArray([1,2,3,4], 'int4')\r\n * //=> [1,2,3,4]\r\n */\nexport const toArray = (value, type) => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  const lastIdx = value.length - 1;\n  const closeBrace = value[lastIdx];\n  const openBrace = value[0];\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr;\n    const valTrim = value.slice(1, lastIdx);\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']');\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : [];\n    }\n    return arr.map(val => convertCell(type, val));\n  }\n  return value;\n};\n/**\r\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\r\n * See https://github.com/supabase/supabase/issues/18\r\n *\r\n * @example toTimestampString('2019-09-10 00:00:00')\r\n * //=> '2019-09-10T00:00:00'\r\n */\nexport const toTimestampString = value => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T');\n  }\n  return value;\n};","map":{"version":3,"names":["PostgresTypes","convertChangeData","columns","record","options","_a","skipTypes","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","dataType","slice","length","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@supabase/realtime-js/dist/module/lib/transformers.js"],"sourcesContent":["/**\r\n * Helpers to convert the change Payload into native JS types.\r\n */\r\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\r\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\r\nexport var PostgresTypes;\r\n(function (PostgresTypes) {\r\n    PostgresTypes[\"abstime\"] = \"abstime\";\r\n    PostgresTypes[\"bool\"] = \"bool\";\r\n    PostgresTypes[\"date\"] = \"date\";\r\n    PostgresTypes[\"daterange\"] = \"daterange\";\r\n    PostgresTypes[\"float4\"] = \"float4\";\r\n    PostgresTypes[\"float8\"] = \"float8\";\r\n    PostgresTypes[\"int2\"] = \"int2\";\r\n    PostgresTypes[\"int4\"] = \"int4\";\r\n    PostgresTypes[\"int4range\"] = \"int4range\";\r\n    PostgresTypes[\"int8\"] = \"int8\";\r\n    PostgresTypes[\"int8range\"] = \"int8range\";\r\n    PostgresTypes[\"json\"] = \"json\";\r\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\r\n    PostgresTypes[\"money\"] = \"money\";\r\n    PostgresTypes[\"numeric\"] = \"numeric\";\r\n    PostgresTypes[\"oid\"] = \"oid\";\r\n    PostgresTypes[\"reltime\"] = \"reltime\";\r\n    PostgresTypes[\"text\"] = \"text\";\r\n    PostgresTypes[\"time\"] = \"time\";\r\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\r\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\r\n    PostgresTypes[\"timetz\"] = \"timetz\";\r\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\r\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\r\n})(PostgresTypes || (PostgresTypes = {}));\r\n/**\r\n * Takes an array of columns and an object of string values then converts each string value\r\n * to its mapped type.\r\n *\r\n * @param {{name: String, type: String}[]} columns\r\n * @param {Object} record\r\n * @param {Object} options The map of various options that can be applied to the mapper\r\n * @param {Array} options.skipTypes The array of types that should not be converted\r\n *\r\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\r\n * //=>{ first_name: 'Paul', age: 33 }\r\n */\r\nexport const convertChangeData = (columns, record, options = {}) => {\r\n    var _a;\r\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\r\n    return Object.keys(record).reduce((acc, rec_key) => {\r\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\r\n        return acc;\r\n    }, {});\r\n};\r\n/**\r\n * Converts the value of an individual column.\r\n *\r\n * @param {String} columnName The column that you want to convert\r\n * @param {{name: String, type: String}[]} columns All of the columns\r\n * @param {Object} record The map of string values\r\n * @param {Array} skipTypes An array of types that should not be converted\r\n * @return {object} Useless information\r\n *\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\r\n * //=> 33\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\r\n * //=> \"33\"\r\n */\r\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\r\n    const column = columns.find((x) => x.name === columnName);\r\n    const colType = column === null || column === void 0 ? void 0 : column.type;\r\n    const value = record[columnName];\r\n    if (colType && !skipTypes.includes(colType)) {\r\n        return convertCell(colType, value);\r\n    }\r\n    return noop(value);\r\n};\r\n/**\r\n * If the value of the cell is `null`, returns null.\r\n * Otherwise converts the string value to the correct type.\r\n * @param {String} type A postgres column type\r\n * @param {String} value The cell value\r\n *\r\n * @example convertCell('bool', 't')\r\n * //=> true\r\n * @example convertCell('int8', '10')\r\n * //=> 10\r\n * @example convertCell('_int4', '{1,2,3,4}')\r\n * //=> [1,2,3,4]\r\n */\r\nexport const convertCell = (type, value) => {\r\n    // if data type is an array\r\n    if (type.charAt(0) === '_') {\r\n        const dataType = type.slice(1, type.length);\r\n        return toArray(value, dataType);\r\n    }\r\n    // If not null, convert to correct type.\r\n    switch (type) {\r\n        case PostgresTypes.bool:\r\n            return toBoolean(value);\r\n        case PostgresTypes.float4:\r\n        case PostgresTypes.float8:\r\n        case PostgresTypes.int2:\r\n        case PostgresTypes.int4:\r\n        case PostgresTypes.int8:\r\n        case PostgresTypes.numeric:\r\n        case PostgresTypes.oid:\r\n            return toNumber(value);\r\n        case PostgresTypes.json:\r\n        case PostgresTypes.jsonb:\r\n            return toJson(value);\r\n        case PostgresTypes.timestamp:\r\n            return toTimestampString(value); // Format to be consistent with PostgREST\r\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.daterange:\r\n        case PostgresTypes.int4range:\r\n        case PostgresTypes.int8range:\r\n        case PostgresTypes.money:\r\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.text:\r\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.tsrange:\r\n        case PostgresTypes.tstzrange:\r\n            return noop(value);\r\n        default:\r\n            // Return the value for remaining types\r\n            return noop(value);\r\n    }\r\n};\r\nconst noop = (value) => {\r\n    return value;\r\n};\r\nexport const toBoolean = (value) => {\r\n    switch (value) {\r\n        case 't':\r\n            return true;\r\n        case 'f':\r\n            return false;\r\n        default:\r\n            return value;\r\n    }\r\n};\r\nexport const toNumber = (value) => {\r\n    if (typeof value === 'string') {\r\n        const parsedValue = parseFloat(value);\r\n        if (!Number.isNaN(parsedValue)) {\r\n            return parsedValue;\r\n        }\r\n    }\r\n    return value;\r\n};\r\nexport const toJson = (value) => {\r\n    if (typeof value === 'string') {\r\n        try {\r\n            return JSON.parse(value);\r\n        }\r\n        catch (error) {\r\n            console.log(`JSON parse error: ${error}`);\r\n            return value;\r\n        }\r\n    }\r\n    return value;\r\n};\r\n/**\r\n * Converts a Postgres Array into a native JS array\r\n *\r\n * @example toArray('{}', 'int4')\r\n * //=> []\r\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\r\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\r\n * @example toArray([1,2,3,4], 'int4')\r\n * //=> [1,2,3,4]\r\n */\r\nexport const toArray = (value, type) => {\r\n    if (typeof value !== 'string') {\r\n        return value;\r\n    }\r\n    const lastIdx = value.length - 1;\r\n    const closeBrace = value[lastIdx];\r\n    const openBrace = value[0];\r\n    // Confirm value is a Postgres array by checking curly brackets\r\n    if (openBrace === '{' && closeBrace === '}') {\r\n        let arr;\r\n        const valTrim = value.slice(1, lastIdx);\r\n        // TODO: find a better solution to separate Postgres array data\r\n        try {\r\n            arr = JSON.parse('[' + valTrim + ']');\r\n        }\r\n        catch (_) {\r\n            // WARNING: splitting on comma does not cover all edge cases\r\n            arr = valTrim ? valTrim.split(',') : [];\r\n        }\r\n        return arr.map((val) => convertCell(type, val));\r\n    }\r\n    return value;\r\n};\r\n/**\r\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\r\n * See https://github.com/supabase/supabase/issues/18\r\n *\r\n * @example toTimestampString('2019-09-10 00:00:00')\r\n * //=> '2019-09-10T00:00:00'\r\n */\r\nexport const toTimestampString = (value) => {\r\n    if (typeof value === 'string') {\r\n        return value.replace(' ', 'T');\r\n    }\r\n    return value;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}