{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { isPlatform } from '@ionic/angular';\nimport { createClient } from '@supabase/supabase-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.currentUser = new BehaviorSubject(false);\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n    this.supabase.auth.onAuthStateChange((event, sess) => {\n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        console.log('SET USER');\n        if (sess) {\n          this.currentUser.next(sess.user);\n        } else {\n          this.currentUser.next(false);\n        }\n      } else {\n        this.currentUser.next(false);\n      }\n    });\n    // Trigger initial session load\n    this.loadUser();\n  }\n  loadUser() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.currentUser.value !== null) {\n        // User is already set or null, no need to do anything else\n        return;\n      }\n      const userResponse = yield _this.supabase.auth.getUser();\n      if (userResponse.data?.user) {\n        _this.currentUser.next(userResponse.data.user);\n      } else {\n        _this.currentUser.next(false);\n      }\n    })();\n  }\n  signUp(credentials) {\n    return this.supabase.auth.signUp(credentials);\n  }\n  signIn(credentials) {\n    return this.supabase.auth.signInWithPassword(credentials);\n  }\n  sendPwReset(email) {\n    return this.supabase.auth.resetPasswordForEmail(email);\n  }\n  signOut() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.supabase.auth.signOut();\n      _this2.router.navigateByUrl('/', {\n        replaceUrl: true\n      });\n    })();\n  }\n  getCurrentUser() {\n    return this.currentUser.asObservable();\n  }\n  getCurrentUserId() {\n    if (this.currentUser.value) {\n      return this.currentUser.value.id;\n    } else {\n      return 'null';\n    }\n  }\n  signInWithEmail(email) {\n    return this.supabase.auth.signInWithOtp({\n      email\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["createClient","BehaviorSubject","environment","AuthService","constructor","router","currentUser","supabase","supabaseUrl","supabaseKey","auth","onAuthStateChange","event","sess","console","log","next","user","loadUser","_this","_asyncToGenerator","value","userResponse","getUser","data","signUp","credentials","signIn","signInWithPassword","sendPwReset","email","resetPasswordForEmail","signOut","_this2","navigateByUrl","replaceUrl","getCurrentUser","asObservable","getCurrentUserId","id","signInWithEmail","signInWithOtp","_","i0","ɵɵinject","i1","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n// import { isPlatform } from '@ionic/angular';\r\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private supabase: SupabaseClient\r\n  private currentUser: BehaviorSubject<boolean | User> = new BehaviorSubject<boolean | User>(false);\r\n\r\n  constructor(private router: Router) {\r\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)\r\n\r\n    this.supabase.auth.onAuthStateChange((event, sess) => {\r\n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\r\n        console.log('SET USER');\r\n    \r\n        if (sess) {\r\n          this.currentUser.next(sess.user);\r\n        } else {\r\n          this.currentUser.next(false);\r\n        }\r\n      } else {\r\n        this.currentUser.next(false);\r\n      }\r\n    });    \r\n\r\n    // Trigger initial session load\r\n    this.loadUser()\r\n  }\r\n\r\n  async loadUser() {\r\n    if (this.currentUser.value !== null) {\r\n      // User is already set or null, no need to do anything else\r\n      return;\r\n    }\r\n    const userResponse = await this.supabase.auth.getUser();\r\n  \r\n    if (userResponse.data?.user) {\r\n      this.currentUser.next(userResponse.data.user);\r\n    } else {\r\n      this.currentUser.next(false);\r\n    }\r\n  }\r\n  \r\n\r\n  signUp(credentials: { email: any; password: any }) {\r\n    return this.supabase.auth.signUp(credentials)\r\n  }\r\n\r\n  signIn(credentials: { email: any; password: any }) {\r\n    return this.supabase.auth.signInWithPassword(credentials)\r\n  }\r\n\r\n  sendPwReset(email: string) {\r\n    return this.supabase.auth.resetPasswordForEmail(email)\r\n  }\r\n\r\n  async signOut() {\r\n    await this.supabase.auth.signOut()\r\n    this.router.navigateByUrl('/', { replaceUrl: true })\r\n  }\r\n\r\n  getCurrentUser(): Observable<User | boolean> {\r\n    return this.currentUser.asObservable()\r\n  }\r\n\r\n  getCurrentUserId(): string {\r\n    if (this.currentUser.value) {\r\n      return (this.currentUser.value as User).id\r\n    } else {\r\n      return 'null'\r\n    }\r\n  }\r\n\r\n  signInWithEmail(email: string) {\r\n    return this.supabase.auth.signInWithOtp({ email })\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}