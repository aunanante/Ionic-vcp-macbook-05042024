{"ast":null,"code":"import { Injectable, NgModule, Pipe } from '@angular/core';\nclass Ng2SearchPipe {\n  /**\n   * @param {?} items object from array\n   * @param {?} term term's search\n   * @return {?}\n   */\n  transform(items, term) {\n    if (!term || !items) return items;\n    return Ng2SearchPipe.filter(items, term);\n  }\n  /**\n   *\n   * @param {?} items List of items to filter\n   * @param {?} term  a string term to compare with every property of the list\n   *\n   * @return {?}\n   */\n  static filter(items, term) {\n    const /** @type {?} */toCompare = term.toLowerCase();\n    /**\n     * @param {?} item\n     * @param {?} term\n     * @return {?}\n     */\n    function checkInside(item, term) {\n      for (let /** @type {?} */property in item) {\n        if (item[property] === null || item[property] == undefined) {\n          continue;\n        }\n        if (typeof item[property] === 'object') {\n          if (checkInside(item[property], term)) {\n            return true;\n          }\n        }\n        if (item[property].toString().toLowerCase().includes(toCompare)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return items.filter(function (item) {\n      return checkInside(item, term);\n    });\n  }\n}\nNg2SearchPipe.decorators = [{\n  type: Pipe,\n  args: [{\n    name: 'filter',\n    pure: false\n  }]\n}, {\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\nclass Ng2SearchPipeModule {}\nNg2SearchPipeModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [Ng2SearchPipe],\n    exports: [Ng2SearchPipe]\n  }]\n}];\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };","map":{"version":3,"names":["Injectable","NgModule","Pipe","Ng2SearchPipe","transform","items","term","filter","toCompare","toLowerCase","checkInside","item","property","undefined","toString","includes","decorators","type","args","name","pure","ctorParameters","Ng2SearchPipeModule","declarations","exports"],"sources":["C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/ng2-search-filter/ng2-search-filter.js"],"sourcesContent":["import { Injectable, NgModule, Pipe } from '@angular/core';\n\nclass Ng2SearchPipe {\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    transform(items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    static filter(items, term) {\n        const /** @type {?} */ toCompare = term.toLowerCase();\n        /**\n         * @param {?} item\n         * @param {?} term\n         * @return {?}\n         */\n        function checkInside(item, term) {\n            for (let /** @type {?} */ property in item) {\n                if (item[property] === null || item[property] == undefined) {\n                    continue;\n                }\n                if (typeof item[property] === 'object') {\n                    if (checkInside(item[property], term)) {\n                        return true;\n                    }\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return items.filter(function (item) {\n            return checkInside(item, term);\n        });\n    }\n}\nNg2SearchPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'filter',\n                pure: false\n            },] },\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\n\nclass Ng2SearchPipeModule {\n}\nNg2SearchPipeModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            },] },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,eAAe;AAE1D,MAAMC,aAAa,CAAC;EAChB;AACJ;AACA;AACA;AACA;EACIC,SAASA,CAACC,KAAK,EAAEC,IAAI,EAAE;IACnB,IAAI,CAACA,IAAI,IAAI,CAACD,KAAK,EACf,OAAOA,KAAK;IAChB,OAAOF,aAAa,CAACI,MAAM,CAACF,KAAK,EAAEC,IAAI,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,MAAMA,CAACF,KAAK,EAAEC,IAAI,EAAE;IACvB,MAAM,gBAAiBE,SAAS,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;IACrD;AACR;AACA;AACA;AACA;IACQ,SAASC,WAAWA,CAACC,IAAI,EAAEL,IAAI,EAAE;MAC7B,KAAK,IAAI,gBAAiBM,QAAQ,IAAID,IAAI,EAAE;QACxC,IAAIA,IAAI,CAACC,QAAQ,CAAC,KAAK,IAAI,IAAID,IAAI,CAACC,QAAQ,CAAC,IAAIC,SAAS,EAAE;UACxD;QACJ;QACA,IAAI,OAAOF,IAAI,CAACC,QAAQ,CAAC,KAAK,QAAQ,EAAE;UACpC,IAAIF,WAAW,CAACC,IAAI,CAACC,QAAQ,CAAC,EAAEN,IAAI,CAAC,EAAE;YACnC,OAAO,IAAI;UACf;QACJ;QACA,IAAIK,IAAI,CAACC,QAAQ,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC,CAACM,QAAQ,CAACP,SAAS,CAAC,EAAE;UAC7D,OAAO,IAAI;QACf;MACJ;MACA,OAAO,KAAK;IAChB;IACA,OAAOH,KAAK,CAACE,MAAM,CAAC,UAAUI,IAAI,EAAE;MAChC,OAAOD,WAAW,CAACC,IAAI,EAAEL,IAAI,CAAC;IAClC,CAAC,CAAC;EACN;AACJ;AACAH,aAAa,CAACa,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAEf,IAAI;EAAEgB,IAAI,EAAE,CAAC;IACTC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;EACV,CAAC;AAAG,CAAC,EACb;EAAEH,IAAI,EAAEjB;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACAG,aAAa,CAACkB,cAAc,GAAG,MAAM,EAAE;AAEvC,MAAMC,mBAAmB,CAAC;AAE1BA,mBAAmB,CAACN,UAAU,GAAG,CAC7B;EAAEC,IAAI,EAAEhB,QAAQ;EAAEiB,IAAI,EAAE,CAAC;IACbK,YAAY,EAAE,CAACpB,aAAa,CAAC;IAC7BqB,OAAO,EAAE,CAACrB,aAAa;EAC3B,CAAC;AAAG,CAAC,CAChB;AACD;AACA;AACA;AACAmB,mBAAmB,CAACD,cAAc,GAAG,MAAM,EAAE;;AAE7C;AACA;AACA;;AAEA,SAASC,mBAAmB,EAAEnB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}