{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createClient } from '@supabase/supabase-js';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage-angular\";\nexport class UserService {\n  constructor(storage) {\n    this.storage = storage;\n    this.currentUserEmailKey = 'currentUserEmail';\n    this.initStorage(); // Initialize storage when the service is created\n    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey);\n  }\n  // Initialize storage\n  initStorage() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.storage.create();\n    })();\n  }\n  // Set the current user's email in Ionic Storage\n  setCurrentUserEmail(email) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.storage.set(_this2.currentUserEmailKey, email);\n    })();\n  }\n  // Get the current user's email from Ionic Storage\n  getCurrentUserEmail() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this3.storage.get(_this3.currentUserEmailKey);\n    })();\n  }\n  // **************************************************\n  // Get business owners associated with a specific email\n  getBusinessOwnersByEmail(email) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data,\n        error\n      } = yield _this4.supabase.from('business_owners').select('*').eq('email', email);\n      if (error) {\n        console.error('Error fetching business owners:', error);\n        return [];\n      }\n      return data || [];\n    })();\n  }\n  getAllBusinessOwners() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data,\n        error\n      } = yield _this5.supabase.from('business_owners').select('*');\n      if (error) {\n        console.error('Error fetching business owners:', error);\n        return [];\n      }\n      return data || [];\n    })();\n  }\n  // Get business owner by ID\n  getBusinessOwnerById(id) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        data,\n        error\n      } = yield _this6.supabase.from('business_owners').select('*').eq('id', id).single();\n      if (error) {\n        console.error('Error fetching business owner by ID:', error);\n        return null;\n      }\n      return data || null;\n    })();\n  }\n  addBusinessOwner(businessOwner) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          error\n        } = yield _this7.supabase.from('business_owners').insert([businessOwner]);\n        if (error) {\n          console.error('Error adding business owner:', error);\n          return false;\n        }\n        return true; // Success\n      } catch (error) {\n        console.error('Error adding business owner:', error);\n        return false;\n      }\n    })();\n  }\n  // Update an existing business owner\n  updateBusinessOwner(businessOwner) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          error\n        } = yield _this8.supabase.from('business_owners').upsert([businessOwner]);\n        if (error) {\n          console.error('Error updating business owner:', error);\n          return false; // Return false if there's an error\n        }\n\n        return true; // Return true if the operation is successful\n      } catch (error) {\n        console.error('Error updating business owner:', error);\n        return false; // Return false if there's an error\n      }\n    })();\n  }\n  // Delete a business owner by ID\n  deleteBusinessOwner(id) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        error\n      } = yield _this9.supabase.from('business_owners').delete().eq('id', id);\n      if (error) {\n        console.error('Error deleting business owner:', error);\n        return false;\n      }\n      return true;\n    })();\n  }\n  // Get the monthly_fee_paid status for a business owner\n  getMonthlyFeePaidStatus(businessOwnerId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _this10.supabase.from('business_owners').select('monthly_fee_paid').eq('id', businessOwnerId).single();\n        if (error) {\n          console.error('Error fetching monthly fee paid status:', error);\n          return false; // Handle the error as needed\n        }\n        // If data is not null, return the monthly_fee_paid value\n        return data ? data.monthly_fee_paid : false;\n      } catch (error) {\n        console.error('Error fetching monthly fee paid status:', error);\n        return false; // Handle the error as needed\n      }\n    })();\n  }\n\n  getCurrentUserId() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const userEmail = yield _this11.getCurrentUserEmail();\n      if (userEmail) {\n        const {\n          data,\n          error\n        } = yield _this11.supabase.from('users').select('id').eq('email', userEmail).single();\n        if (error) {\n          console.error('Error fetching user ID:', error.message);\n          return null;\n        }\n        if (data) {\n          return data.id;\n        }\n      }\n      return null;\n    })();\n  }\n  uploadImage(file) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Upload the blob data to Supabase storage\n        const fileName = _this12.generateFileName();\n        const {\n          data,\n          error\n        } = yield _this12.supabase.storage.from('imageries').upload(fileName, file);\n        if (error) {\n          console.error('Error uploading image:', error.message);\n          return null;\n        } else {\n          // Construct the URL based on the generated file name.\n          const imageUrl = `${environment.supabaseUrl}/storage/v1/object/public/imageries/${fileName}`;\n          return imageUrl;\n        }\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        return null;\n      }\n    })();\n  }\n  generateFileName() {\n    // Generate a unique file name for the image\n    return `${Date.now()}_${Math.random().toString(36).substring(2)}.jpg`;\n  }\n  deleteBusinessOwnerByEmail(email) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const {\n          error\n        } = yield _this13.supabase.from('business_owners').delete().eq('email', email);\n        if (error) {\n          console.error('Error deleting business owner:', error);\n          return false; // Return false if there's an error\n        }\n\n        return true; // Return true if the deletion is successful\n      } catch (error) {\n        console.error('Error deleting business owner:', error);\n        return false; // Return false if there's an error\n      }\n    })();\n  }\n\n  getBusinessOwnerId() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Step 1: Get the current user's email\n        const userEmail = yield _this14.getCurrentUserEmail();\n        if (!userEmail) {\n          console.error('User email not found.');\n          return null;\n        }\n        // Step 2: Get business owners associated with the user's email\n        const businessOwners = yield _this14.getBusinessOwnersByEmail(userEmail);\n        if (businessOwners.length === 0) {\n          console.error('No business owner found for the user email:', userEmail);\n          return null;\n        }\n        // Step 3: Extract the business owner ID\n        const businessOwnerId = businessOwners[0].id;\n        return businessOwnerId;\n      } catch (error) {\n        console.error('Error getting business owner ID:', error);\n        return null;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.Storage));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["createClient","environment","UserService","constructor","storage","currentUserEmailKey","initStorage","supabase","supabaseUrl","supabaseKey","_this","_asyncToGenerator","create","setCurrentUserEmail","email","_this2","set","getCurrentUserEmail","_this3","get","getBusinessOwnersByEmail","_this4","data","error","from","select","eq","console","getAllBusinessOwners","_this5","getBusinessOwnerById","id","_this6","single","addBusinessOwner","businessOwner","_this7","insert","updateBusinessOwner","_this8","upsert","deleteBusinessOwner","_this9","delete","getMonthlyFeePaidStatus","businessOwnerId","_this10","monthly_fee_paid","getCurrentUserId","_this11","userEmail","message","uploadImage","file","_this12","fileName","generateFileName","upload","imageUrl","Date","now","Math","random","toString","substring","deleteBusinessOwnerByEmail","_this13","getBusinessOwnerId","_this14","businessOwners","length","_","i0","ɵɵinject","i1","Storage","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage-angular'; // Updated import\r\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private supabase: SupabaseClient;\r\n\r\n  private currentUserEmailKey = 'currentUserEmail';\r\n  constructor(private storage: Storage) {\r\n    this.initStorage(); // Initialize storage when the service is created\r\n    this.supabase = createClient(\r\n      environment.supabaseUrl,\r\n      environment.supabaseKey\r\n    );\r\n  }\r\n\r\n  // Initialize storage\r\n  async initStorage() {\r\n    await this.storage.create();\r\n  }\r\n\r\n  // Set the current user's email in Ionic Storage\r\n  async setCurrentUserEmail(email: string) {\r\n    await this.storage.set(this.currentUserEmailKey, email);\r\n  }\r\n\r\n  // Get the current user's email from Ionic Storage\r\n  async getCurrentUserEmail(): Promise<string | null> {\r\n    return await this.storage.get(this.currentUserEmailKey);\r\n  }\r\n\r\n  // **************************************************\r\n\r\n  // Get business owners associated with a specific email\r\n  async getBusinessOwnersByEmail(email: string): Promise<any[]> {\r\n    const { data, error } = await this.supabase\r\n      .from('business_owners')\r\n      .select('*')\r\n      .eq('email', email);\r\n\r\n    if (error) {\r\n      console.error('Error fetching business owners:', error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  async getAllBusinessOwners(): Promise<any[]> {\r\n    const { data, error } = await this.supabase\r\n      .from('business_owners')\r\n      .select('*');\r\n \r\n    if (error) {\r\n      console.error('Error fetching business owners:', error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  // Get business owner by ID\r\n  async getBusinessOwnerById(id: string): Promise<any | null> {\r\n    const { data, error } = await this.supabase\r\n      .from('business_owners')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error fetching business owner by ID:', error);\r\n      return null;\r\n    }\r\n\r\n    return data || null;\r\n  }\r\n\r\n  async addBusinessOwner(businessOwner: any): Promise<boolean> {\r\n    try {\r\n      const { error } = await this.supabase\r\n        .from('business_owners')\r\n        .insert([businessOwner]);\r\n\r\n      if (error) {\r\n        console.error('Error adding business owner:', error);\r\n        return false;\r\n      }\r\n\r\n      return true; // Success\r\n    } catch (error) {\r\n      console.error('Error adding business owner:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update an existing business owner\r\n  async updateBusinessOwner(businessOwner: any): Promise<boolean> {\r\n    try {\r\n      const { error } = await this.supabase\r\n        .from('business_owners')\r\n        .upsert([businessOwner]);\r\n\r\n      if (error) {\r\n        console.error('Error updating business owner:', error);\r\n        return false; // Return false if there's an error\r\n      }\r\n\r\n      return true; // Return true if the operation is successful\r\n    } catch (error) {\r\n      console.error('Error updating business owner:', error);\r\n      return false; // Return false if there's an error\r\n    }\r\n  }\r\n\r\n  // Delete a business owner by ID\r\n  async deleteBusinessOwner(id: string): Promise<boolean> {\r\n    const { error } = await this.supabase\r\n      .from('business_owners')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error('Error deleting business owner:', error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Get the monthly_fee_paid status for a business owner\r\n  async getMonthlyFeePaidStatus(businessOwnerId: string): Promise<boolean> {\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('business_owners')\r\n        .select('monthly_fee_paid')\r\n        .eq('id', businessOwnerId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error fetching monthly fee paid status:', error);\r\n        return false; // Handle the error as needed\r\n      }\r\n\r\n      // If data is not null, return the monthly_fee_paid value\r\n      return data ? data.monthly_fee_paid : false;\r\n    } catch (error) {\r\n      console.error('Error fetching monthly fee paid status:', error);\r\n      return false; // Handle the error as needed\r\n    }\r\n  }\r\n\r\n  async getCurrentUserId(): Promise<string | null> {\r\n    const userEmail = await this.getCurrentUserEmail();\r\n    if (userEmail) {\r\n      const { data, error } = await this.supabase\r\n        .from('users')\r\n        .select('id')\r\n        .eq('email', userEmail)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error fetching user ID:', error.message);\r\n        return null;\r\n      }\r\n\r\n      if (data) {\r\n        return data.id;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async uploadImage(file: File): Promise<string | null> {\r\n    try {\r\n      // Upload the blob data to Supabase storage\r\n      const fileName = this.generateFileName();\r\n      const { data, error } = await this.supabase.storage\r\n        .from('imageries')\r\n        .upload(fileName, file);\r\n\r\n      if (error) {\r\n        console.error('Error uploading image:', error.message);\r\n        return null;\r\n      } else {\r\n        // Construct the URL based on the generated file name.\r\n        const imageUrl = `${environment.supabaseUrl}/storage/v1/object/public/imageries/${fileName}`;\r\n        return imageUrl;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private generateFileName(): string {\r\n    // Generate a unique file name for the image\r\n    return `${Date.now()}_${Math.random().toString(36).substring(2)}.jpg`;\r\n  }\r\n\r\n  async deleteBusinessOwnerByEmail(email: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await this.supabase\r\n        .from('business_owners')\r\n        .delete()\r\n        .eq('email', email);\r\n  \r\n      if (error) {\r\n        console.error('Error deleting business owner:', error);\r\n        return false; // Return false if there's an error\r\n      }\r\n  \r\n      return true; // Return true if the deletion is successful\r\n    } catch (error) {\r\n      console.error('Error deleting business owner:', error);\r\n      return false; // Return false if there's an error\r\n    }\r\n  } \r\n\r\n  async getBusinessOwnerId(): Promise<string | null> {\r\n    try {\r\n      // Step 1: Get the current user's email\r\n      const userEmail = await this.getCurrentUserEmail();\r\n      \r\n      if (!userEmail) {\r\n        console.error('User email not found.');\r\n        return null;\r\n      }\r\n\r\n      // Step 2: Get business owners associated with the user's email\r\n      const businessOwners = await this.getBusinessOwnersByEmail(userEmail);\r\n\r\n      if (businessOwners.length === 0) {\r\n        console.error('No business owner found for the user email:', userEmail);\r\n        return null;\r\n      }\r\n\r\n      // Step 3: Extract the business owner ID\r\n      const businessOwnerId = businessOwners[0].id;\r\n\r\n      return businessOwnerId;\r\n    } catch (error) {\r\n      console.error('Error getting business owner ID:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}