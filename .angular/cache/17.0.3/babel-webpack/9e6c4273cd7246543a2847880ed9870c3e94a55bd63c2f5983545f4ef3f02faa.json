{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jclon/chatgptVcp/Ionic-vcp-macbook27mars22024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"src/app/services/payment.service\";\nimport * as i4 from \"src/app/services/user.service\";\nimport * as i5 from \"@angular/common\";\nfunction RenewPaymentPage_ion_select_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r1.label);\n  }\n}\nexport class RenewPaymentPage {\n  constructor(formBuilder, modalController, alertController, paymentService, userService) {\n    this.formBuilder = formBuilder;\n    this.modalController = modalController;\n    this.alertController = alertController;\n    this.paymentService = paymentService;\n    this.userService = userService;\n    this.durationOptions = [{\n      label: '0.1',\n      value: 0.1\n    }, {\n      label: '0.5',\n      value: 0.5\n    }, {\n      label: '1',\n      value: 1\n    }, {\n      label: '3',\n      value: 3\n    }, {\n      label: '6',\n      value: 6\n    }, {\n      label: '9',\n      value: 9\n    }, {\n      label: '12',\n      value: 12\n    }];\n  }\n  ngOnInit() {\n    this.initializeForm();\n    console.log('latest Payment : ', this.latestPayment);\n  }\n  /*  private initializeForm() {\n     this.paymentForm = this.formBuilder.group({\n       amount: [this.latestPayment.amount, Validators.required],\n       duration_months: [this.latestPayment.duration_months, Validators.required],\n       payment_date: [this.latestPayment.payment_date],\n       expiry_date: [this.latestPayment.expiry_date]\n     });\n   } */\n  initializeForm() {\n    const today = new Date();\n    const expiryDate = this.calculateExpiryDate(today, this.latestPayment.duration_months);\n    this.paymentForm = this.formBuilder.group({\n      amount: [this.latestPayment.amount, Validators.required],\n      duration_months: [this.latestPayment.duration_months, Validators.required],\n      payment_date: [today.toISOString()],\n      expiry_date: [expiryDate.toISOString()]\n    });\n  }\n  calculateExpiryDate(startDate, durationMonths) {\n    const expiryDate = new Date(startDate);\n    // Calculate expiry date based on duration months\n    if (durationMonths <= 0.1) {\n      expiryDate.setDate(startDate.getDate() + 3); // 3 days for 0.1 month\n    } else if (durationMonths === 0.5) {\n      expiryDate.setDate(startDate.getDate() + 15); // 15 days for 0.5 month\n    } else {\n      expiryDate.setMonth(startDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\n    }\n    // Set the time part of the expiry date to match the start date\n    expiryDate.setHours(startDate.getHours());\n    expiryDate.setMinutes(startDate.getMinutes());\n    expiryDate.setSeconds(startDate.getSeconds());\n    return expiryDate;\n  }\n  updateAmountAndExpiryDate() {\n    const durationMonthsControl = this.paymentForm.get('duration_months');\n    if (durationMonthsControl) {\n      const today = new Date();\n      const durationMonths = parseFloat(durationMonthsControl.value);\n      const expiryDate = new Date(today);\n      // Calculate expiry date based on duration months\n      if (durationMonths <= 0.1) {\n        expiryDate.setDate(today.getDate() + 3); // 3 days for 0.1 month\n      } else if (durationMonths === 0.5) {\n        expiryDate.setDate(today.getDate() + 15); // 15 days for 0.5 month\n      } else {\n        expiryDate.setMonth(expiryDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\n      }\n      // Set the time part of the expiry date to match the payment date\n      expiryDate.setHours(today.getHours());\n      expiryDate.setMinutes(today.getMinutes());\n      expiryDate.setSeconds(today.getSeconds());\n      const expiryDateISO = expiryDate.toISOString(); // Get ISO string including time\n      const expiryDateControl = this.paymentForm.get('expiry_date');\n      if (expiryDateControl) {\n        expiryDateControl.setValue(expiryDateISO);\n      }\n      // Calculate amount based on duration months\n      let amount;\n      if (durationMonths <= 0.1) {\n        amount = 0.1;\n      } else if (durationMonths === 0.5) {\n        amount = 0.5;\n      } else {\n        amount = Math.floor(durationMonths);\n      }\n      const amountControl = this.paymentForm.get('amount');\n      if (amountControl) {\n        amountControl.setValue(amount);\n      }\n      // Log the values of all fields\n      console.log('Amount:', amountControl ? amountControl.value : null);\n      console.log('Duration Months:', durationMonths);\n      console.log('Payment Date:', today);\n      console.log('Expiry Date:', expiryDateControl ? expiryDateControl.value : null);\n    }\n  }\n  cancel() {\n    // Dismiss the modal without any data\n    this.modalController.dismiss();\n  }\n  renew() {\n    if (this.paymentForm.valid) {\n      const paymentData = this.paymentForm.value;\n      this.presentConfirmationAlert(paymentData); // Display confirmation alert\n    } else {\n      console.error('Payment form is invalid');\n    }\n  }\n  presentConfirmationAlert(paymentData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // console.log('Presenting confirmation alert');\n      const alert = yield _this.alertController.create({\n        header: 'Confirm Payment',\n        message: `\n            Amount: ${paymentData.amount}\\n\n            Duration (months): ${paymentData.duration_months}\\n\n            Payment Date: ${paymentData.payment_date}\\n\n            Expiry Date: ${paymentData.expiry_date}\\n\n        `,\n        buttons: [{\n          text: 'Cancel',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel button clicked');\n          }\n        }, {\n          text: 'OK',\n          handler: function () {\n            var _ref = _asyncToGenerator(function* () {\n              console.log('OK button clicked');\n              yield _this.postPayment(paymentData);\n            });\n            return function handler() {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        }]\n      });\n      // console.log('Alert created');\n      yield alert.present();\n      // console.log('Alert presented');\n    })();\n  }\n\n  postPayment(paymentData) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Convert duration_months to a numeric value\n        const durationMonthsNumeric = parseFloat(paymentData.duration_months);\n        // Update paymentData with the converted value\n        const paymentDataWithNumericDuration = {\n          ...paymentData,\n          duration_months: durationMonthsNumeric\n        };\n        // Step 1: Insert payment data into the payments table\n        const paymentId = yield _this2.paymentService.makePayment(paymentDataWithNumericDuration);\n        if (paymentId) {\n          const businessOwnerId = yield _this2.userService.getBusinessOwnerId();\n          if (businessOwnerId) {\n            // Step 2: update the business_owners_payments table\n            yield _this2.paymentService.updateBusinessOwnersPayments(businessOwnerId, paymentId);\n            // Step 3: update access control\n            yield _this2.paymentService.updateAccessControl(businessOwnerId);\n            // Step 4: Update business owners\n            yield _this2.paymentService.updateBusinessOwners(businessOwnerId);\n            console.log('Renewal confirmed:', paymentDataWithNumericDuration);\n            yield _this2.modalController.dismiss(paymentDataWithNumericDuration, 'confirm'); // Dismiss with a 'confirm' role\n            // Alert for successful payment\n            _this2.presentAlerte('Renewal successful');\n          } else {\n            console.error('Business owner ID not found.');\n          }\n        } else {\n          console.error('Error making payment.');\n        }\n      } catch (error) {\n        console.error('Error confirming payment:', error);\n      }\n    })();\n  }\n  presentAlerte(message) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this3.alertController.create({\n        header: 'Success',\n        message: message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  presentAlert(message) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this4.alertController.create({\n        header: 'Alert',\n        message: message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  static #_ = this.ɵfac = function RenewPaymentPage_Factory(t) {\n    return new (t || RenewPaymentPage)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.PaymentService), i0.ɵɵdirectiveInject(i4.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RenewPaymentPage,\n    selectors: [[\"app-renew-payment\"]],\n    inputs: {\n      latestPayment: \"latestPayment\"\n    },\n    decls: 31,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [\"position\", \"floating\"], [\"type\", \"number\", \"formControlName\", \"amount\"], [\"formControlName\", \"duration_months\", \"interface\", \"popover\", 3, \"ionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"position\", \"floating\", 1, \"payment-date-label\"], [\"displayFormat\", \"YYYY-MM-DD HH:mm\", \"formControlName\", \"payment_date\", \"readonly\", \"\"], [\"position\", \"floating\", 1, \"expiry-date-label\"], [\"type\", \"text\", \"formControlName\", \"expiry_date\", \"readonly\", \"\", 1, \"custom-input\"], [\"slot\", \"start\"], [\"color\", \"primary\", 3, \"click\"], [\"slot\", \"end\"], [3, \"value\"]],\n    template: function RenewPaymentPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Renew Payment\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\")(5, \"form\", 0)(6, \"ion-item\")(7, \"ion-label\", 1);\n        i0.ɵɵtext(8, \"Amount\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"ion-input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-item\")(11, \"ion-label\", 1);\n        i0.ɵɵtext(12, \"Duration (months)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-select\", 3);\n        i0.ɵɵlistener(\"ionChange\", function RenewPaymentPage_Template_ion_select_ionChange_13_listener() {\n          return ctx.updateAmountAndExpiryDate();\n        });\n        i0.ɵɵtemplate(14, RenewPaymentPage_ion_select_option_14_Template, 2, 2, \"ion-select-option\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"ion-item\")(16, \"ion-label\", 5);\n        i0.ɵɵtext(17, \"Payment Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"ion-datetime\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"ion-item\")(20, \"ion-label\", 7);\n        i0.ɵɵtext(21, \"Expiry Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"ion-input\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"ion-footer\")(24, \"ion-toolbar\")(25, \"ion-buttons\", 9)(26, \"ion-button\", 10);\n        i0.ɵɵlistener(\"click\", function RenewPaymentPage_Template_ion_button_click_26_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(27, \"Cancel\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"ion-buttons\", 11)(29, \"ion-button\", 10);\n        i0.ɵɵlistener(\"click\", function RenewPaymentPage_Template_ion_button_click_29_listener() {\n          return ctx.renew();\n        });\n        i0.ɵɵtext(30, \"Renew\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.paymentForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.durationOptions);\n      }\n    },\n    dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i2.IonButton, i2.IonButtons, i2.IonContent, i2.IonDatetime, i2.IonFooter, i2.IonHeader, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonSelect, i2.IonSelectOption, i2.IonTitle, i2.IonToolbar, i2.NumericValueAccessor, i2.SelectValueAccessor, i2.TextValueAccessor, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","option_r1","value","ɵɵadvance","ɵɵtextInterpolate","label","RenewPaymentPage","constructor","formBuilder","modalController","alertController","paymentService","userService","durationOptions","ngOnInit","initializeForm","console","log","latestPayment","today","Date","expiryDate","calculateExpiryDate","duration_months","paymentForm","group","amount","required","payment_date","toISOString","expiry_date","startDate","durationMonths","setDate","getDate","setMonth","getMonth","Math","floor","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","updateAmountAndExpiryDate","durationMonthsControl","get","parseFloat","expiryDateISO","expiryDateControl","setValue","amountControl","cancel","dismiss","renew","valid","paymentData","presentConfirmationAlert","error","_this","_asyncToGenerator","alert","create","header","message","buttons","text","role","handler","_ref","postPayment","apply","arguments","present","_this2","durationMonthsNumeric","paymentDataWithNumericDuration","paymentId","makePayment","businessOwnerId","getBusinessOwnerId","updateBusinessOwnersPayments","updateAccessControl","updateBusinessOwners","presentAlerte","_this3","presentAlert","_this4","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ModalController","AlertController","i3","PaymentService","i4","UserService","_2","selectors","inputs","decls","vars","consts","template","RenewPaymentPage_Template","rf","ctx","ɵɵelement","ɵɵlistener","RenewPaymentPage_Template_ion_select_ionChange_13_listener","ɵɵtemplate","RenewPaymentPage_ion_select_option_14_Template","RenewPaymentPage_Template_ion_button_click_26_listener","RenewPaymentPage_Template_ion_button_click_29_listener"],"sources":["C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\pages\\renew-payment\\renew-payment.page.ts","C:\\Users\\jclon\\chatgptVcp\\Ionic-vcp-macbook27mars22024\\src\\app\\pages\\renew-payment\\renew-payment.page.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AlertController, ModalController } from '@ionic/angular';\r\nimport { PaymentService } from 'src/app/services/payment.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-renew-payment',\r\n  templateUrl: './renew-payment.page.html',\r\n  styleUrls: ['./renew-payment.page.scss'],\r\n})\r\nexport class RenewPaymentPage implements OnInit {\r\n\r\n  @Input() latestPayment: any;\r\n  paymentForm!: FormGroup;\r\n\r\n  durationOptions = [\r\n    { label: '0.1', value: 0.1 },\r\n    { label: '0.5', value: 0.5 },\r\n    { label: '1', value: 1 },\r\n    { label: '3', value: 3 },\r\n    { label: '6', value: 6 },\r\n    { label: '9', value: 9 },\r\n    { label: '12', value: 12 }\r\n  ];\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private modalController: ModalController,\r\n    private alertController: AlertController,\r\n    private paymentService: PaymentService,\r\n    private userService: UserService\r\n    ) { }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n    console.log('latest Payment : ', this.latestPayment);\r\n  }\r\n\r\n /*  private initializeForm() {\r\n    this.paymentForm = this.formBuilder.group({\r\n      amount: [this.latestPayment.amount, Validators.required],\r\n      duration_months: [this.latestPayment.duration_months, Validators.required],\r\n      payment_date: [this.latestPayment.payment_date],\r\n      expiry_date: [this.latestPayment.expiry_date]\r\n    });\r\n  } */\r\n\r\n  private initializeForm() {\r\n    const today = new Date();\r\n    const expiryDate = this.calculateExpiryDate(today, this.latestPayment.duration_months);\r\n\r\n    this.paymentForm = this.formBuilder.group({\r\n      amount: [this.latestPayment.amount, Validators.required],\r\n      duration_months: [this.latestPayment.duration_months, Validators.required],\r\n      payment_date: [today.toISOString()],\r\n      expiry_date: [expiryDate.toISOString()]\r\n    });\r\n  }\r\n\r\n  calculateExpiryDate(startDate: Date, durationMonths: number): Date {\r\n    const expiryDate = new Date(startDate);\r\n  \r\n    // Calculate expiry date based on duration months\r\n    if (durationMonths <= 0.1) {\r\n      expiryDate.setDate(startDate.getDate() + 3); // 3 days for 0.1 month\r\n    } else if (durationMonths === 0.5) {\r\n      expiryDate.setDate(startDate.getDate() + 15); // 15 days for 0.5 month\r\n    } else {\r\n      expiryDate.setMonth(startDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\r\n    }\r\n  \r\n    // Set the time part of the expiry date to match the start date\r\n    expiryDate.setHours(startDate.getHours());\r\n    expiryDate.setMinutes(startDate.getMinutes());\r\n    expiryDate.setSeconds(startDate.getSeconds());\r\n\r\n    return expiryDate;\r\n  }\r\n\r\n  updateAmountAndExpiryDate() {\r\n    const durationMonthsControl = this.paymentForm.get('duration_months');\r\n    if (durationMonthsControl) {\r\n      const today = new Date();\r\n      const durationMonths = parseFloat(durationMonthsControl.value);\r\n      const expiryDate = new Date(today);\r\n  \r\n      // Calculate expiry date based on duration months\r\n      if (durationMonths <= 0.1) {\r\n        expiryDate.setDate(today.getDate() + 3); // 3 days for 0.1 month\r\n      } else if (durationMonths === 0.5) {\r\n        expiryDate.setDate(today.getDate() + 15); // 15 days for 0.5 month\r\n      } else {\r\n        expiryDate.setMonth(expiryDate.getMonth() + Math.floor(durationMonths)); // Whole months for other durations\r\n      }\r\n  \r\n      // Set the time part of the expiry date to match the payment date\r\n      expiryDate.setHours(today.getHours());\r\n      expiryDate.setMinutes(today.getMinutes());\r\n      expiryDate.setSeconds(today.getSeconds());\r\n  \r\n      const expiryDateISO = expiryDate.toISOString(); // Get ISO string including time\r\n  \r\n      const expiryDateControl = this.paymentForm.get('expiry_date');\r\n      if (expiryDateControl) {\r\n        expiryDateControl.setValue(expiryDateISO);\r\n      }\r\n  \r\n      // Calculate amount based on duration months\r\n      let amount;\r\n      if (durationMonths <= 0.1) {\r\n        amount = 0.1;\r\n      } else if (durationMonths === 0.5) {\r\n        amount = 0.5;\r\n      } else {\r\n        amount = Math.floor(durationMonths);\r\n      }\r\n  \r\n      const amountControl = this.paymentForm.get('amount');\r\n      if (amountControl) {\r\n        amountControl.setValue(amount);\r\n      }\r\n  \r\n      // Log the values of all fields\r\n      console.log('Amount:', amountControl ? amountControl.value : null);\r\n      console.log('Duration Months:', durationMonths);\r\n      console.log('Payment Date:', today);\r\n      console.log('Expiry Date:', expiryDateControl ? expiryDateControl.value : null);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    // Dismiss the modal without any data\r\n    this.modalController.dismiss();\r\n  }\r\n\r\n  renew() {\r\n    if (this.paymentForm.valid) {\r\n      const paymentData = this.paymentForm.value;\r\n      this.presentConfirmationAlert(paymentData); // Display confirmation alert\r\n    } else {\r\n      console.error('Payment form is invalid');\r\n    }\r\n  }\r\n\r\n  async presentConfirmationAlert(paymentData: any): Promise<void> {\r\n    // console.log('Presenting confirmation alert');\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirm Payment',\r\n      message: `\r\n            Amount: ${paymentData.amount}\\n\r\n            Duration (months): ${paymentData.duration_months}\\n\r\n            Payment Date: ${paymentData.payment_date}\\n\r\n            Expiry Date: ${paymentData.expiry_date}\\n\r\n        `,\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          handler: () => {\r\n            console.log('Cancel button clicked');\r\n          },\r\n        },\r\n        {\r\n          text: 'OK',\r\n          handler: async () => {\r\n            console.log('OK button clicked');\r\n            await this.postPayment(paymentData);\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    // console.log('Alert created');\r\n    await alert.present();\r\n    // console.log('Alert presented');\r\n  }\r\n\r\n  async postPayment(paymentData: any): Promise<void> {\r\n    try {\r\n      // Convert duration_months to a numeric value\r\n      const durationMonthsNumeric = parseFloat(paymentData.duration_months);\r\n  \r\n      // Update paymentData with the converted value\r\n      const paymentDataWithNumericDuration = {\r\n        ...paymentData,\r\n        duration_months: durationMonthsNumeric,\r\n      };\r\n   \r\n      // Step 1: Insert payment data into the payments table\r\n      const paymentId = await this.paymentService.makePayment(paymentDataWithNumericDuration);\r\n  \r\n      if (paymentId) {\r\n        \r\n        const businessOwnerId = await this.userService.getBusinessOwnerId();\r\n        if (businessOwnerId) {\r\n          // Step 2: update the business_owners_payments table\r\n          await this.paymentService.updateBusinessOwnersPayments(businessOwnerId, paymentId);\r\n\r\n          // Step 3: update access control\r\n          await this.paymentService.updateAccessControl(businessOwnerId);\r\n\r\n          // Step 4: Update business owners\r\n          await this.paymentService.updateBusinessOwners(businessOwnerId);\r\n\r\n          console.log('Renewal confirmed:', paymentDataWithNumericDuration);\r\n          await this.modalController.dismiss(paymentDataWithNumericDuration, 'confirm'); // Dismiss with a 'confirm' role\r\n  \r\n          // Alert for successful payment\r\n          this.presentAlerte('Renewal successful');\r\n        } else {\r\n          console.error('Business owner ID not found.');\r\n        } \r\n      } else {\r\n        console.error('Error making payment.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error confirming payment:', error);\r\n    }\r\n  }\r\n  \r\n  async presentAlerte(message: string): Promise<void> {\r\n    const alert = await this.alertController.create({\r\n      header: 'Success',\r\n      message: message,\r\n      buttons: ['OK'],\r\n    });\r\n    await alert.present();\r\n  }\r\n  \r\n\r\n  async presentAlert(message: string): Promise<void> {\r\n    const alert = await this.alertController.create({\r\n      header: 'Alert',\r\n      message: message,\r\n      buttons: ['OK'],\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n}\r\n","<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>Renew Payment</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  <form [formGroup]=\"paymentForm\">\r\n    <ion-item>\r\n      <ion-label position=\"floating\">Amount</ion-label>\r\n      <ion-input type=\"number\" formControlName=\"amount\"></ion-input>\r\n    </ion-item>\r\n \r\n    <ion-item>\r\n      <ion-label position=\"floating\">Duration (months)</ion-label>\r\n      <ion-select formControlName=\"duration_months\" interface=\"popover\" (ionChange)=\"updateAmountAndExpiryDate()\">\r\n        <ion-select-option *ngFor=\"let option of durationOptions\" [value]=\"option.value\">{{ option.label }}</ion-select-option>\r\n      </ion-select>\r\n    </ion-item>\r\n\r\n    <ion-item>\r\n      <ion-label class=\"payment-date-label\" position=\"floating\">Payment Date</ion-label>\r\n      <ion-datetime displayFormat=\"YYYY-MM-DD HH:mm\" formControlName=\"payment_date\" readonly></ion-datetime>\r\n    </ion-item>\r\n    \r\n    <ion-item>\r\n      <ion-label class=\"expiry-date-label\" position=\"floating\">Expiry Date</ion-label>\r\n      <ion-input type=\"text\" formControlName=\"expiry_date\" class=\"custom-input\" readonly></ion-input>\r\n    </ion-item>\r\n  </form>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-button (click)=\"cancel()\" color=\"primary\">Cancel</ion-button>\r\n    </ion-buttons>\r\n    <ion-buttons slot=\"end\">\r\n      <ion-button (click)=\"renew()\" color=\"primary\">Renew</ion-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-footer>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}